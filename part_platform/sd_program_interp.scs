.system_element_36
=> nrel_inclusion: [*
	=> .system_element_38: .system_element_37;;

	.system_element_39
	<- .system_element_2;
	-> rrel_studied_object_class: 
		.system_element_33
	;
	-> .system_element_40: 
		.system_element_41;
		.system_element_42;
		.system_element_43;
		.system_element_44;
		.system_element_45;
		.system_element_46;
		.system_element_47;
		.system_element_48;
		.system_element_49;
		.system_element_50;
		.system_element_51;
		.system_element_52;
		.system_element_53;
		.system_element_54;
		.system_element_55;
		.system_element_56;
		.system_element_57;
		.system_element_58;
		.system_element_59;
		.system_element_60
	;;

	.system_element_61
	<= .system_element_62: 
		.system_element_63;
		.system_element_64
	;;

	.system_element_33
	=> nrel_idtf: [<p>программная реализация платформы интерпретации sc-моделей компьютерных систем</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>программный вариант реализации базового интерпретатора логико-семантических моделей компьютерных систем</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>программный вариант реализации базового интерпретатора логико-семантических моделей ostis-систем на современных компьютерах</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>вариант реализации базового интерпретатора логико-семантических моделей компьютерных систем на традиционных компьютерах с архитектурой фон Неймана</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_explanation: [<p>Одним из путей, позволяющих осуществлять апробацию, развитие, а в ряде случаев и внедрение новых моделей и технологий вне зависимости от наличия соответствующих аппаратных средств является разработка программных моделей этих аппаратных средств, которые были бы функционально эквивалентны этим аппаратным средствам, но при этом интерпретировались на базе традиционной аппаратной архитектуры (в данной работе традиционной архитектурой будем считать архитектуру фон Неймана, как доминирующую в настоящее время). Очевидно, что производительность таких программных моделей в общем случае будет ниже, чем самих аппаратных решений, однако в большинстве случаев она оказывается достаточной для того, чтобы развивать соответствующую технологию параллельно с разработкой аппаратных средств и осуществления постепенного перевода уже работающих систем с программной модели на аппаратные средства.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_inclusion: .system_element_65
	(*
		=> nrel_idtf: [<p>вариант реализации платформы интерпретации sc-моделей компьютерных систем предполагающий взаимодействие пользователей с системой посредством сети Интернет</p>];;
		<= nrel_inclusion: .system_element_35;;
		-> .system_element_41;;
	*);;

	.system_element_41
	=> .system_element_66: [<p>Поскольку sc-тексты представляют собой семантические сети, то есть, по сути, графовые конструкции определенного вида, то на нижнем уровне задача разработки программного варианта реализации платформы интерпретации sc-моделей сводится к разработке средств хранения и обработки таких графовых конструкций.К настоящему времени разработано большое количество простейших моделей представления графовых конструкций в линейной памяти, таких как матрицы смежности, списки смежности и другие (Diskrete_Math). Однако, при разработке сложных систем как правило приходится использовать более эффективные модели, как с точки зрения объема информации, требуемого для представления, так и с точки зрения эффективности обработки графовых конструкций, хранимых в той или иной форме.К наиболее распространенным программным средствам, ориентированным на хранение и обработку графовых конструкций относятся графовые СУБД (Neo4j Neo4j, ArangoDB ArangoDB, OrientDB OrientDB, Grakn Grakn и др.), а также так называемые rdf-хранилища (Virtuoso Virtuoso, Sesame Sesame и др.), предназначенные для хранения конструкций, представленных в модели RDF. Для доступа к информации, хранимой в рамках таких средств, могут использоваться как языки, реализуемые в рамках конкретного средства (например, язык Cypher в Neo4j), так и языки, являющиеся стандартами для большого числа систем такого класса (например, SPARQL для rdf-хранилищ).Популярность и развитость такого рода средств приводит к тому, что на первый взгляд целесообразным и эффективным кажется вариант реализации <i>программного варианта реализации платформы интерпретации sc-моделей</i> на базе одного из таких средств. Однако, существует ряд причин, по которым было принято решение о реализации <i>программного варианта реализации платформы интерпретации sc-моделей</i> с нуля. К ним относятся следующие:

	<ul>

		<li> для обеспечения эффективности хранения и обработки информационных конструкций определенного вида (в данном случае --- конструкций SC-кода, sc-конструкций), должна учитываться специфика этих конструкций. В частности, описанные в работе Koronchik2013 эксперименты показали значительный прирост эффективности собственного решения по сравнению с существующими на тот момент;

		<li> в отличие от классических графовых конструкций, где дуга или ребро могут быть инцидентны только вершине графа (это справедливо и для rdf-графов) в SC-коде вполне типичной является ситуация, когда sc-коннектор инцидентен другому sc-коннектору или даже двум sc-коннекторам. В связи с этим существующие средства хранения графовых конструкций не позволяют в явном виде хранить sc-конструкции (sc-графы). Возможным решением данной проблемы является переход от sc-графа к орграфу инцидентности, пример которого описан в работе Ivashenko2015, однако такой вариант приводит к увеличению числа хранимых элементов в несколько раз и значительно снижает эффективность алгоритмов поиска из-за необходимости делать большое количество дополнительных итераций;

		<li> в основе обработки информации в рамках Технологии OSTIS лежит многоагентный подход, в рамках которого агенты обработки информации, хранимой в sc-памяти (sc-агенты) реагируют на события, происходящие в sc-памяти и обмениваются информацией посредством спецификации выполняемых ими действий в sc-памяти Shunkevich2018. В связи с этим одной из важнейших задач является реализация в рамках <i>программного варианта реализации платформы интерпретации sc-моделей</i> возможности подписки на события, происходящие в программной модели sc-памяти, которая на данный момент практически не поддерживается в рамках современных средств хранения и обработки графовых конструкций;

		<li> SC-код позволяет описывать также внешние информационные конструкции любого рода (изображения, текстовые файла, аудио- и видеофайлы и т.д.), которые формально трактуются как содержимое <i>sc-элементов</i>, являющихся знаками <i>внешних файлов ostis-системы</i>. Таким образом, компонентом <i>программного варианта реализации платформы интерпретации sc-моделей</i> должна быть реализация файловой памяти, которая позволяет хранить указанные конструкции в каких-либо общепринятых форматах. Реализация такого компонента в рамках современных средств хранения и обработки графовых конструкций также не всегда представляется возможной.</li>

	<ul>По совокупности перечисленных причин было принято решение о реализации <i>программного варианта реализации платформы интерпретации sc-моделей</i> "с нуля" с учетом особенностей хранения и обработки информации в рамках Технологии OSTIS.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_67: {
		.system_element_42;
		.system_element_59
	};
	=> nrel_explanation: [<p>Текущий <i>Программный вариант реализации платформы интерпретации sc-моделей компьютерных систем</i> является web-ориентированным, то есть с точки зрения современной архитектуры каждая <b>ostis-система</b> представляет собой web-сайт доступный онлайн посредством обычного браузера. Такой вариант реализации обладает очевидным преимуществом --- доступ к системе возможен из любой точки мира, где есть Интернет, при этом для работы с системой не требуется никакого специализированного программного обеспечения. С другой стороны, такой вариант реализации обеспечивает возможность параллельной работы с системой нескольких пользователей.В то же время, взаимодействие клиентской и серверной части организовано таким образом, что <b>web-интерфейс</b> может быть легко заменен на настольный или мобильный интерфейс, как универсальный, так и специализированный.Данный вариант реализации распространяется под open-source лицензией, для хранения исходных текстов используется хостинг Github и коллективная учетная запись ostis-ai.Реализация является кроссплатформенной и может быть собрана из исходных текстов в различных операционных системах.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_68: "file://Contents/part_platform/images/platform_arch.pdf"
	(*
		<- concept_file;;
		=> nrel_format: format_pdf;;
		=> nrel_explanation: [<p>На приведенной иллюстрации видно, что ядром платформы является <i>Программная модель sc-памяти</i> (sc-machine), которая одновременно может взаимодействовать как с <i>Реализацией интерпретатора sc-моделей пользовательских интерфейсов</i> (sc-web), так и с любыми сторонними приложениями по соответствующим сетевым протоколам. С точки зрения общей архитектуры <i>Реализация интерпретатора sc-моделей пользовательских интерфейсов</i> выступает как один из множества возможных внешних компонентов, взаимодействующих с <i>Программной моделью sc-памяти</i> по сети.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;

	.system_element_42
	=> nrel_idtf: [<p>sc-machine</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>Программная модель семантической памяти, реализованная на основе традиционной линейной памяти и включающая средства хранения sc-конструкций и базовые средства для обработки этих конструкций, в том числе удаленного доступа к ним посредством соответствующих сетевых протоколов</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<= .system_element_70: .system_element_69;
	<- .system_element_71;
	=> .system_element_72: [<p>https://github.com/ostis-ai/sc-machine.git</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_73: 
		.system_element_43
		(*
			=> nrel_explanation: [<p>В рамках текущей <i>Программной модели sc-памяти</i> под <i>sc-хранилищем</i> понимается компонент программной модели, осуществляющий хранение sc-конструкций и доступ к ним через программный интерфейс. В общем случае <i>sc-хранилище</i> может быть реализовано по-разному. Кроме собственно <i>sc-хранилища</i> <i>Программная модель sc-памяти</i> включает также <i>Реализацию файловой памяти ostis-системы</i>, предназначенную для хранения содержимого <i>внутренних файлов ostis-систем</i>. Стоит отметить, что при переходе с <i>Программной модели sc-памяти</i> на ее аппаратную реализацию файловую память ostis-системы целесообразно будет реализовывать на основе традиционной линейной памяти (во всяком случае, на первых этапах развития <i>семантического компьютера</i>).</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_74;
		.system_element_56;
		.system_element_75;
		.system_element_60
	;
	=> .system_element_76: [<p>http://ostis-ai.github.io/sc-machine/</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_77: 
		.system_element_78;
		.system_element_79;
		.system_element_80
	;
	=> nrel_note: [<p>Текущий вариант <i>Программной модели sc-памяти</i> предполагает возможность сохранения состояния (слепка) памяти на жесткий диск и последующей загрузки из ранее сохраненного состояния. Такая возможность необходима для перезапуска системы, в случае возможных сбоев, а также при работе с исходными текстами базы знаний, когда сборка из исходных текстов сводится к формированию слепка состояния памяти, который затем помещается в <i>Программную модель sc-памяти</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_43
	=> .system_element_73: 
		.system_element_44;
		.system_element_54
	;;

	.system_element_44
	<- .system_element_81;
	=> .system_element_68: "file://Contents/part_platform/images/sc_storage.pdf"
	(*
		<- concept_file;;
		=> nrel_format: format_pdf;;
	*);
	=> .system_element_83: .system_element_82
	(*
		=> nrel_idtf: [<p>страница sc-хранилища</p>];;
		=> nrel_explanation: [<p>В рамках данной реализации <i>sc-хранилища</i> <i>sc-память</i> моделируется в виде набора <i>сегментов</i>, каждый из которых представляет собой фиксированного размера упорядоченную последовательность <i>элементов sc-хранилища</i>, каждый из которых соответствует конкретному sc-элементу. В настоящее время каждый сегмент состоит из 2^16-1=65535 <i>элементов sc-хранилища</i>. Выделение <i>сегментов sc-хранилища</i> позволяет, с одной стороны, упростить адресный доступ к <i>элементам sc-хранилища</i>, с другой стороны --- реализовать возможность выгрузки части sc-памяти из оперативной памяти на файловую систему при необходимости. Во втором случае сегмент sc-хранилища становится минимальной (атомарной) выгружаемой частью sc-памяти. Механизм выгрузки сегментов реализуется в соответствии с существующими принципами организации виртуальной памяти в современных операционных системах.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_note: [<p>Максимально возможное число сегментов ограничивается настройками программной реализации sc-хранилища (в настоящее время по умолчанию установлено количество 2^16-1=65535 сегментов, но в общем случае оно может быть другим). Таким образом, технически максимальное количество хранимых sc-элементов в текущей реализации составляет около 4.3  10^9 sc-элементов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_note: [<p>По умолчанию все сегменты физически располагаются в оперативной памяти, если объема памяти не хватает, то предусмотрен механизм выгрузки части сегментов на жесткий диск (механизм виртуальной памяти).</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> .system_element_83: .system_element_46
		(*
			=> nrel_explanation: [<p>Каждый сегмент состоит из набора структур данных, описывающих конкретные <i>sc-элементы</i> (элементов sc-хранилища). Независимо от типа описываемого sc-элемента каждый <i>элемент sc-хранилища</i> имеет фиксированный размер (в текущий момент --- 48 байт), что обеспечивает удобство их хранения. Таким образом, максимальный размер базы знаний в текущей программной модели sc-памяти может достигнуть 223 Гб (без учета содержимого <i>внутренних файлов ostis-системы</i>, хранимого на внешней файловой системе).</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);;
	*);
	=> .system_element_84: "file://Contents/part_platform/images/sc_storage_example.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_explanation: [<p>Для наглядности в данном примере опущены <i>метки уровня доступа</i></p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;

	.system_element_45
	=> nrel_idtf: [<p>адрес элемента sc-хранилища, соответствующего заданному sc-элементу, в рамках текущего состояния реализации sc-хранилища в составе программной модели sc-памяти</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_explanation: [<p>Каждый элемент sc-хранилища в текущей реализации может быть однозначно задан его адресом (sc-адресом), состоящим из номера сегмента и номера <i>элемента sc-хранилища</i> в рамках сегмента. Таким образом, <i>sc-адрес</i> служит уникальными координатами <i>элемента sc-хранилища</i> в рамках <i>Реализации sc-хранилища</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Sc-адрес никак не учитывается при обработке базы знаний на семантическом уровне и необходим только для обеспечения доступа к соответствующей структуре данных, хранящейся в линейной памяти на уровне <i>Реализации sc-хранилища</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>В общем случае sc-адрес элемента sc-хранилища, соответствующего заданному sc-элементу, может меняться, например, при пересборке базы знаний из исходных текстов и последующем перезапуске системы. При этом sc-адрес элемента sc-хранилища, соответствующего заданному sc-элементу, непосредственно в процессе работы системы в текущей реализации меняться не может.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Для простоты будем говорить "sc-адрес sc-элемента", имея в виду <i>sc-адрес</i> <i>элемента sc-хранилища</i>, однозначно соответствующего данному <i>sc-элементу</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_85: 
		.system_element_86;
		.system_element_87
	;
	=> nrel_note: [<p>Для каждого sc-адреса можно взаимно однозначно поставить в соответствие некоторый хэш, полученный в результате применения специальной хэш-функции над этим sc-адресом. Хэш является неотрицательным целым числом и является результатом преобразования номера сегмента sc-хранилища si, в котором располагается sc-элемент, и номера этого sc-элемента sc-хранилища ei в рамках этого сегмента si. В рамках sc-хранилища используется единственная хеш-функция для получения хеша sc-адреса sc-элемента и задаётся как f(si, ei) = si << 16 ∨ ei ∧ 0xffff, где операция << - операция логического битового сдвига влево левого аргумента на количество единиц, заданное правым аргументом, относительно этой операции, операция ∨ - операция логического ИЛИ, операция ∧ - операция логического И, число 0xffff - число 65535, представленное в шестнадцатеричном виде и обозначающее максимальное количество sc-элементов в одном сегменте sc-хранилища.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_46
	=> nrel_idtf: [<p>ячейка sc-хранилища</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>элемент sc-хранилища, соответствующий sc-элементу</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>образ sc-элемента в рамках sc-хранилища</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>структура данных, каждый экземпляр которой соответствует одному sc-элементу в рамках sc-хранилища</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_explanation: [<p>Каждый элемент sc-хранилища, соответствующий некоторому sc-элементу, описывается его синтаксическим типом (меткой), а также независимо от типа указывается sc-адрес первой входящей в данный sc-элемент sc-дуги и первой выходящей из данного sc-элемента sc-дуги (могут быть пустыми, если таких sc-дуг нет).Оставшиеся байты в зависимости от типа соответствующего sc-элемента (sc-узел или sc-дуга) могут использоваться либо для хранения содержимого внутреннего файла ostis-системы (может быть пустым, если sc-узел не является знаком файла), либо для хранения спецификации sc-дуги.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_subdividing: {
		.system_element_88
		(*
			=> .system_element_85: {
				.system_element_89;
				.system_element_90;
				.system_element_91;
				.system_element_92;
				.system_element_93
				(*
					=> .system_element_95: .system_element_94;;
					=> nrel_explanation: [<p>Каждый sc-узел в текущей реализации может иметь содержимое (может стать <i>внутренним файлом ostis-системы</i>).В случае, если размер содержимого внутреннего файла ostis-системы не превышает 48 байт (размер <i>спецификации sc-дуги в рамках sc-хранилища</i>, например небольшой <i>строковый <b>sc-идентификатор</b></i>), то это содержимое явно хранится в рамках элемента <b>sc-хранилища</b> в виде последовательности байт.В противном случае оно помещается в специальным образом организованную файловую память (за ее организацию отвечает отдельный модуль платформы, который в общем случае может быть устроен по-разному), а в рамках элемента sc-хранилища хранится уникальный адрес соответствующего файла, позволяющий быстро найти его на файловой системе.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*)
			}
			(*
				=> nrel_note: [<p><i>sc-адрес первой sc-дуги, выходящей из данного sc-элемента*</i>, <i>sc-адрес первой sc-дуги, входящей в данный sc-элемент*</i> и <i>содержимое элемента sc-хранилища*</i> в общем случае могут отсутствовать (быть нулевыми, "пустыми"), но размер элемента в байтах останется тем же.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
			*);;
		*);
		.system_element_96
		(*
			=> .system_element_85: {
				.system_element_89;
				.system_element_90;
				.system_element_91;
				.system_element_92;
				.system_element_97
				(*
					=> .system_element_95: .system_element_98
					(*
						=> .system_element_85: {
							.system_element_99;
							.system_element_100;
							.system_element_101;
							.system_element_102;
							.system_element_103;
							.system_element_104
						};;
					*);;
				*)
			};;
			=> nrel_note: [<p>sc-ребра в текущий момент хранятся так же, как sc-дуги, то есть имеют начальный и конечный sc-элементы, отличие заключается только в <i>метке синтаксического типа sc-элемента</i>. Это приводит к ряду неудобств при обработке, но sc-ребра используются в настоящее время достаточно редко.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*)
	}
	(*
		=> nrel_note: [<p>С точки зрения программной реализации структура данных для хранения sc-узла и sc-дуги остается остается та же, но в ней меняется список полей (компонентов).Кроме того, как можно заметить каждый элемент sc-хранилища (в том числе, <i>элемент sc-хранилища, соответствующий sc-дуге</i>) не хранит список sc-адресов связанных с ним sc-элементов, а хранит sc-адреса одной выходящей и одной входящей дуги, каждая из которых в свою очередь хранит sc-адреса следующей и предыдущей дуг в списке исходящих и входящих sc-дуг для соответствующих элементов.Все перечисленное позволяет:
		<ul>
			<li> сделать размер такой структуры фиксированным (в настоящее время 48 байт) и не зависящим от синтаксического типа хранимого sc-элемента;
			<li> обеспечить возможность работы с sc-элементами без учета их синтаксического типа в случаях, когда это необходимо (например, при реализации поисковых запросов вида "Какие sc-элементы являются элементами данного множества", "Какие sc-элементы непосредственно связаны с данным sc-элементом" и т.д.);
			<li> обеспечить возможность доступа к <i>элементу sc-хранилища</i> за константное время;
			<li> обеспечить возможность помещения <i>элемента sc-хранилища</i> в процессорный кэш, что в свою очередь, позволяет ускорить обработку sc-конструкций;</li>
		<ul></p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_note: [<p>Текущая <i>Программная модель sc-памяти</i> предполагает, что вся sc-память физически расположена на одном компьютере. Для реализации распределенного варианта <i>Программной модели sc-памяти</i> предполагается расширить <i>sc-адрес</i> указанием адреса того физического устройства, где хранится соответствующий <i>элемент sc-хранилища</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_47
	=> nrel_idtf: [<p>уникальный числовой идентификатор, однозначно соответствующий заданному типу sc-элементов и приписываемый соответствующему элементу sc-хранилища на уровне реализации</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Очевидно, что тип (класс, вид) sc-элемента в sc-памяти может быть задан путем явного указания принадлежности данного sc-элемента соответствующему классу (sc-узел, sc-дуга и т.д.).Однако, в рамках <i>платформы интерпретации sc-моделей компьютерных систем</i> должен существовать какой-либо набор <i>меток синтаксического типа sc-элемента</i>, которые задают тип элемента на уровне платформы и не имеют соответствующей sc-дуги принадлежности (а точнее --- базовой sc-дуги), явно хранимой в рамках sc-памяти (ее наличие подразумевается, однако она не хранится явно, поскольку это приведет к бесконечному увеличению числа sc-элементов, которые необходимо хранить в sc-памяти). Как минимум, должна существовать метка, соответствующая классу <i>базовая sc-дуга</i>, поскольку явное указание принадлежности sc-дуги данному классу порождает еще одну <i>базовую sc-дугу</i>.Таким образом, <i>базовые sc-дуги</i>, обозначающие принадлежность sc-элементов некоторому известному ограниченному набору классов представлены неявно. Этот факт необходимо учитывать в ряде случаев, например, при проверке принадлежности sc-элемента некоторому классу, при поиске всех выходящих sc-дуг из заданного sc-элемента и т.д.При необходимости некоторые из таких неявно хранимых sc-дуг могут быть представлены явно, например, в случае, когда такую sc-дугу необходимо включить в какое-либо множество, то есть провести в нее другую sc-дугу. В этом случае возникает необходимость синхронизации изменений, связанных с данной sc-дугой (например, ее удалении), в явном и неявном ее представлении. В текущей <i>Реализации sc-хранилища</i> данный механизм не реализован.Таким образом, полностью отказаться от <i>меток синтаксического типа sc-элементов</i> невозможно, однако увеличение их числа хоть и повышает производительность платформы за счет упрощений некоторых операций по проверке типов sc-элемента, но приводит к увеличению числа ситуаций, в которых необходимо учитывать явное и неявное представление sc-дуг, что, в свою очередь, усложняет развитие платформы и разработку программного кода для обработки хранимых sc-конструкций.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<= .system_element_95: .system_element_89;
	=> nrel_inclusion: .system_element_105
	(*
		=> .system_element_106: [<p>0x1</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_107
	(*
		=> .system_element_106: [<p>0x2</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_108
	(*
		=> .system_element_106: [<p>0x4</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_109
	(*
		=> .system_element_106: [<p>0x8</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_110
	(*
		=> .system_element_106: [<p>0x10</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_111
	(*
		=> .system_element_106: [<p>0x20</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_112
	(*
		=> .system_element_106: [<p>0x40</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_113
	(*
		=> .system_element_106: [<p>0x80</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_114
	(*
		=> .system_element_106: [<p>0x100</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_115
	(*
		=> .system_element_106: [<p>0x200</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_116
	(*
		=> .system_element_106: [<p>0x400</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_117
	(*
		=> .system_element_106: [<p>0x800</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_118
	(*
		=> .system_element_106: [<p>0x80</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_119
	(*
		=> .system_element_106: [<p>0x100</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_120
	(*
		=> .system_element_106: [<p>0x200</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_121
	(*
		=> .system_element_106: [<p>0x400</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_122
	(*
		=> .system_element_106: [<p>0x800</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_123
	(*
		=> .system_element_106: [<p>0x1000</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_124
	(*
		=> .system_element_106: [<p>0x2000</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_125
	(*
		=> nrel_idtf: [<p>метка базовой sc-дуги</p>];;
		=> nrel_idtf: [<p>метка sc-дуги основного вида</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		<= .system_element_126: {
			.system_element_110;
			.system_element_111;
			.system_element_113;
			.system_element_116
		};;
		=> nrel_note: [<p><i>метки синтаксических типов sc-элементов</i> могут комбинироваться между собой для получения более частных классов меток. С точки зрения программной реализации такая комбинация выражается операцией побитового сложения значений соответствующих меток.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_127
	(*
		<= .system_element_126: {
			.system_element_110;
			.system_element_112;
			.system_element_113;
			.system_element_116
		};;
	*);
	=> nrel_note: [<p>Числовые выражения некоторых классов меток могут совпадать. Это сделано для уменьшения размера элемента sc-хранилища за счет уменьшения максимального размера метки. Конфликт в данном случае не возникает, поскольку такие классы меток не могут комбинироваться, например <i>метка ролевого отношения</i> и <i>метка нечеткой sc-дуги принадлежности</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Важно отметить, что каждому из выделенных классов меток (кроме классов, получаемых путем комбинации других классов) однозначно соответствует порядковый номер бита в линейной памяти, что можно заметить, глядя на соответствующие числовые выражения классов меток. Это означает, что классы меток не включаются друг в друга, например, указание <i>метки позитивной sc-дуги принадлежности</i> не означает автоматическое указание <i>метки sc-дуги принадлежности</i>. Это позволяет сделать операции комбинирования и сравнения меток более эффективными.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<= .system_element_128: {
		[<p>На данный момент число <i>меток синтаксического типа sc-элемента</i> достаточно велико, что приводит к возникновению достаточно большого числа ситуаций, в которых нужно учитывать явное и неявное хранение sc-дуг принадлежности соответствующим классам. С другой стороны, изменение набора меток с какой-либо целью в текущем варианте реализации представляет собой достаточно трудоемкую задачу (с точки зрения объема изменений в программном коде платформы и sc-агентов, реализованных на уровне платформы), а расширение набора меток без увеличения объема элемента sc-хранилища в байтах оказывается и вовсе невозможным.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_129: [<p>Решением данной проблемы является максимально возможная минимизация числа меток, например, до числа меток, соответствующих <i>Алфавиту SC-кода</i>. В таком случае принадлежность sc-элементов любым другим классам будет записываться явно, а число ситуаций, в которых необходимо будет учитывать неявное хранение sc-дуг, будет минимальным.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		[<p>Некоторые метки из текущего набора <i>меток синтаксического типа sc-элемента</i> используются достаточно редко (например, <i>метка sc-ребра общего вида</i> или <i>метка негативной sc-дуги принадлежности</i>), в свою очередь, в sc-памяти могут существовать классы, имеющие достаточно много элементов (например, <i>бинарное отношение</i> или <i>число</i>). Данный факт не позволяет в полной мере использовать эффективность наличия меток.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_129: [<p>Решением данной проблемы является отказ от заранее известного набора меток и переход к динамическому набору меток (при этом их число может оставаться фиксированным). В этом случае набор классов, выражаемых в виде меток будет формироваться на основании каких-либо критериев, например, числа элементов данного класса или частоты обращений к нему.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*)
	};;

	.system_element_48
	<= .system_element_95: .system_element_90;
	=> .system_element_130: {
		.system_element_131;
		.system_element_132
	};
	=> nrel_explanation: [<p>В текущей <i>Реализации sc-хранилища</i> <i>метки уровня доступа</i> используются для того, чтобы обеспечить возможность ограничения доутспа некоторых процессов в sc-памяти к некоторым sc-элементам, хранимым в sc-памяти.Каждому элементу sc-хранилища соответствует <i>метка уровня доступа sc-элемента на чтение</i> и <i>метка уровня доступа sc-элемента на запись</i>, каждая из которых выражается числом от 0 до 255.В свою очередь, каждому процессу (чаще всего, соответствующему некоторому sc-агенту), который пытается получить доступ к данному элементу sc-хранилища (прочитать или изменить его) соответствует уровень доступа на чтение и запись, выраженный в том же числовом диапазоне. Указанный уровень доступа для процесса является частью <i>контекста процесса</i>. Доступ на чтение или запись к элементу sc-хранилища не разрешается, если уровень доступа соответственно на чтение или запись у процесса ниже, чем у элемента sc-хранилища, к которому осуществляется доступ.Таким образом нулевое значение <i>метки уровня доступа sc-элемента на чтение</i> и <i>метки уровня доступа sc-элемента на запись</i> означает, что любой процесс может получить неограниченный доступ к данному элементу sc-хранилища.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_54
	=> nrel_explanation: [<p>Для хранения содержимого внутренних файлов ostis-систем, размер которого превышает 48 байт, используются файлы, явно хранимые на файловой системе, доступ к которой осуществляется средствами операционной системы, на которой работает <i>Программный вариант реализации платформы интерпретации sc-моделей компьютерных систем</i>.В общем случае множество различных внутренних файлов ostis-системы могут иметь одинаковое содержимое. Было бы разумно не хранить содержимое одинаковых файлов дважды. Для этого при создании соответствуюещго sc-узла и указании файла на файловой системе, который является содержимым данного sc-узла, вычисляется hash-сумма содержимого с помощью алгоритма SHA256. В результате получается строка из 32 символов, которая и выступает в качестве <i>содержимого элемента sc-хранилища*</i>. Само же содержимое копируется вфайл на файловой системе, путь к которому строится на основании hash-суммы. Рядом с этим файлом создается файл, в котором хранятся sc-адреса всех sc-узлов, имеющих одно и то же ранее указанное содержимое. Таким образом, для того, чтобы найти все sc-узлы, имеющие указанное содержимое, необходимо вычислить hash-сумму искомого содержимого-образца и проверить наличие файла на файловой системе по пути, вычисляемому из hash-суммы и если он существует, то вернуть список хранящихся sc-адресов.Кроме того, для реализации быстрого поиска sc-элементов по их строковым sc-идентификаторам или их фрагментам (подстрокам) используется дополнительное хранилище вида ключ-значение, которое ставит в соответствие <i>строковому sc-идентификатору</i> <i>sc-адрес</i> того <i>sc-элемента</i>, идентификатором которого является данная строка (в случае основного и системного sc-идентификатора) или <i>sc-элемента</i>, который является знаком <i>внутреннего файла ostis-системы</i> (в случае неосновного sc-идентификатора).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_51
	=> nrel_idtf: [<p>ScContext</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>контекст процесса, выполняемого на уровне программной модели sc-памяти</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>метаописание процесса в sc-памяти, выполняемого на уровне программной модели sc-памяти</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>структура данных, содержащая метаинформацию о процессе, выполняемом в sc-памяти на уровне платформы</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<= .system_element_133: .system_element_44;
	=> nrel_explanation: [<p>Каждому процессу, выполняемому в sc-памяти на уровне <i>платформы интерпретации sc-моделей компьютерных систем</i> (и чаще всего соответствующего некоторому <i>sc-агенту</i>, реализованному на уровне платформы) ставится в соответствие <i>контекст процесса</i>, который является структурой данных, описывающей метаинформацию о данном процессе. На текущий момент контекст процесса содержит сведения об уровне доступа на чтение и запись для данного процесса (См. <i>метка уровня доступа sc-элемента</i>).При вызове в рамках процесса любых функций (методов), связанных с доступом к хранимым в sc-памяти конструкциям одним из параметров обязательно является <i>контекст процесса</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_52
	=> nrel_idtf: [<p>ScLock</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<= .system_element_133: .system_element_44;;

	.system_element_53
	=> nrel_idtf: [<p>ScEvent</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>структура данных, описывающая в рамках программной модели sc-памяти соответствие между классом событий в sc-памяти и действиями, которые должно быть совершены при возникновении в sc-памяти событий данного класса</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<= .system_element_133: .system_element_44;
	=> nrel_explanation: [<p>Для того, чтобы обеспечить возможность создания sc-агентов в рамках <i>платформы интерпретации sc-моделей компьютерных систем</i> реализована возможность создать подписку на событие, принадлежащее одному из классов <i>элементарных событий в sc-памяти*</i> (см. Раздел "<i>Предметная область и онтология темпоральных сущностей базы знаний ostis-системы</i>"), уточнив при этом sc-элемент, с которым должно быть связано событие данного класса (например, sc-элемент, для которого должна появиться входящая или исходящая sc-дуга). Подписка на событие представляет собой структуру данных, описывающую класс ожидаемых событий и функцию в программном коде, которая должна быть вызвана при возникновении данного события.Все подписки на события регистрируются в рамках таблицы событий. При любом изменении в sc-памяти происходит просмотр данной таблицы и запуск функций, соответствующих произошедшему событию.В текущей реализации обработка каждого события осуществляется в отдельном потоке операционной системы, при этом на уровне реализации задается параметр, описывающий число максимальных потоков, которые могут выполняться параллельно.Таким образом оказывается возможным реализовать sc-агенты, реагирующие на события в sc-памяти, а также при выполнении некоторого процесса в sc-памяти приостановить его работу и дождаться возникновения некоторого события (например, создать подзадачу некоторому коллективу sc-агентов и дождаться ее решения).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_49
	=> nrel_idtf: [<p>ScIterator</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<= .system_element_133: .system_element_44;
	=> nrel_explanation: [<p>С функциональной точки зрения <i>sc-итераторы</i> как часть <i>Реализации sc-хранилища</i> представляют собой базовое средство доступа к конструкциям, хранимым в sc-памяти, которое позволяет осуществить чтение (просмотр) конструкций, изоморфных простейшим шаблонам --- <i>трехэлементным sc-конструкциям</i> и <i>пятиэлементным sc-конструкциям</i>.С точки зрения реализации <i>sc-итератор</i> представляет собой структуру данных, которая соответствует определенному дополнительно уточняемому классу sc-конструкций и позволяет при помощи соответствующего набора функций последовательно осуществлять просмотр всех sc-конструкций данного класса, представленных в текущем состоянии sc-памяти (итерацию по sc-конструкциям).Каждому классу <i>sc-итераторов</i> соответствует некоторый известный класс (шаблон, образец) <b>sc-конструкций</b>. При создании sc-итератора данный шаблон уточняется, то есть некоторым (как минимум одному) элементам шаблона ставится в соответствие конкретный заранее известный <i>sc-элемент</i> (отправная точка при поиске), а другим элементам шаблона (тем, которые нужно найти) ставится в соответствие некоторый тип sc-элемента из числа типов, соответствующих <i>меткам синтаксического типа sc-элемента</i>.Далее путем вызова соответствующей функции (или метода класса в ООП) осуществляется последовательный просмотр всех sc-конструкций, соответствующих полученному шаблону (с учетом указанных типов sc-элементов и заранее заданных известных sc-элементов), то есть <i>sc-итератор</i> последовательно "переключается" с одной конструкции на другую до тех пор, пока такие конструкции существуют. Проверка существования следующей конструкции проверяется непосредственно перед переключением. В общем случае конструкций, соответствующих указанному шаблону, может не существовать, в этом случае итерирование происходить не будет (будет 0 итераций).На каждой итерации в sc-итератор записываются sc-адреса sc-элементов, входящих в соответствующую sc-конструкцию, таким образом найденные элементы могут быть обработаны нужным образом в зависимости от задачи.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_inclusion: .system_element_134
	(*
		=> .system_element_136: .system_element_135;;
	*);
	=> nrel_inclusion: .system_element_137
	(*
		=> .system_element_136: .system_element_138;;
		=> nrel_note: [<p>В настоящее время <i>пятиэлементный sc-итератор</i> реализуется на основе <i>трехэлементных sc-итераторов</i> и в этом смысле не является атомарным. Однако, введение <i>пятиэлементных sc-итераторов</i> целесообразно с точки зрения удобства разработчика программ обработки <b>sc-конструкций</b>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;

	.system_element_50
	=> nrel_idtf: [<p>ScTemplate</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>структура данных в линейной памяти, описывающая обобщенную sc-структуру, которая в свою очередь может быть либо явно представлена sc-памяти, либо не представлена в ее текущем состоянии, но может быть представлена при необходимости</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<= .system_element_133: .system_element_44;
	=> nrel_explanation: [<p><i>Sc-итераторы</i> позволяют осуществлять поиск только sc-конструкций простейшей конфигурации. Для реализации поиска sc-конструкций более сложной конфигурации, а также генерации сложных sc-конструкций используются <i>sc-шаблоны</i>, на основе которых затем осуществляется поиск или генерация конструкций. <i>Sc-шаблон</i> представляет собой структуру данных, соответствующую некоторой <i>обобщенной структуре</i>, т.е. <i>структуре</i>, содержащей <i>sc-переменные</i>. При помощи соответствующего набора функций можно осуществлять
	<ul>
		<li> поиск в текущем состоянии sc-памяти всех sc-конструкций, изоморфных заданному шаблону. В качестве параметров поиска можно указать значения для каких-либо из sc-переменных в составе шаблона. После осуществления поиска будет сформировано множество результатов поиска, каждый из которых представляет собой множество пар вида "sc-переменная из шаблона --- соответствующая ей sc-константа". Данное множество может быть пустым (в текущем состоянии sc-памяти нет конструкций, изоморфных заданному образцу) или содержать один или более элементов. Подстановка значений sc-переменных может осуществляться как по sc-адресу, так и по системному sc-идентификатору;
		<li> генерацию sc-конструкции, изоморфной заданному шаблону. Параметры и результаты генерации формируются так же, как в случае поиска, за исключением того, что в случае генерации результат всегда один и множество результатов не формируется.</li>
	<ul>Таким образом, каждый <i>sc-шаблон</i> фактически задает множество шаблонов, формируемых путем указания значений для sc-переменных, входящих в исходный шаблон.Важно отметить, что <i>sc-шаблон</i> представляет собой структуру данных в линейной памяти, соответствующую некоторой <i>обобщенной структуре</i> в sc-памяти, но не саму эту <i>обобщенную структуру</i>. Это означает, что sc-шаблон может быть автоматически сформирован на основе <i>обобщенной структуры</i>, явно представленной в sc-памяти, а также сформирован на уровне программного кода путем вызова соответствующих функций (методов). Во втором случае <i>sc-шаблон</i> будет существовать только в линейной памяти и соответствующая <i>обобщенная структура</i> не будет явно представлена в sc-памяти. В этом случае подстановка значений sc-переменных будет возможна только по системному sc-идентификатору, поскольку sc-адресов у соответствующих элементов шаблона существовать не будет.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>При поиске sc-конструкций, изоморфных заданному шаблону, крайне важно с точки зрения производительности с какого sc-элемента начинать поиск. Как известно, в общем случае задача поиска в графе представляет собой NP-полную задачу, однако поиск в sc-графе позволяет учитывать семантику обрабатываемой информации, что, в свою очередь, позволяет существенно снизить время поиска.Одним из возможных вариантов оптимизации алгоритма поиска, реализованным на данный момент, является упорядочение трехэлементных sc-конструкций, входящих в состав sc-шаблона, по очередности поиска по этим sc-конструкциям по критерию снижения числа возможных вариантов поиска, которые порождает та или иная трехэлементная sc-конструкция, содержащая sc-переменные. Так, в первую очередь при поиске выбираются те трехэлементные sc-конструкции, которые изначально содержат две sc-константы, затем те, которые изначально содержат одну sc-константу. После выполнения шага поиска приоритет sc-конструкций изменяется с учетом результатов, полученных на предыдущем шаге.Другой вариант оптимизации основывается на той особенности формализации в SC-коде, что в общем случае число sc-дуг, входящих в некоторый sc-элемент, как правило значительно меньше числа выходящих из него sc-дуг. Таким образом, целесообразным оказывается осуществлять поиск вначале по входящим sc-дугам.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Можно предположить, что возможности, предоставляемые <i>sc-шаблонами</i> позволяют полностью исключить использование <i>sc-итераторов</i>. Однако это не совсем так по следующим причинам:
	<ul>
		<li> функции поиска и генерации по шаблону реализуются на основе sc-итераторов, как базового средства поиска sc-конструкций в рамках <i>Реализации sc-хранилища</i>.
		<li> <i>sc-итераторы</i> дают возможность более гибко организовать процесс поиска с учетом семантики конкретных sc-элементов, участвующих в поиске. Так например, можно учесть тот факт, что для некоторых sc-элементов число входящих sc-дуг значительно меньше, чем выходящих (или наоборот) таким образом, при поиске конструкций, содержащих такие sc-элементы более эффективно начать перебор с тех участков, где дуг потенциально меньше.</li>
	<ul></p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_74
	=> nrel_idtf: [<p>sc-kpm</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_73: 
		.system_element_139
		(*
			=> .system_element_77: 
				.system_element_140
			;;
			=> .system_element_73: 
				.system_element_141;
				.system_element_142;
				.system_element_143;
				.system_element_144;
				.system_element_145
				(*
					=> .system_element_73: 
						.system_element_146;
						.system_element_147;
						.system_element_148;
						.system_element_149
					;;
				*)
			;;
		*);
		.system_element_150
		(*
			=> .system_element_77: 
				.system_element_140
			;;
			=> nrel_note: [<p>Текущая реализация механизма сборки информационного мусора содержит один sc-агент, реагирующий на явное добавление какого-либо sc-элемента во множество "информационный мусор" и осуществляющий физическое удаление этого sc-элемента из sc-памяти</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_151
		(*
			=> .system_element_77: 
				.system_element_152
			;;
			=> .system_element_73: 
				.system_element_153;
				.system_element_154
				(*
					=> nrel_note: [<p>В настоящее время используется подход, при котором независимо от формы внешнего представления информации, информация хранимая в sc-памяти вначале транслируется в промежуточный транспортный формат на базе JSON, который затем обрабатывается sc-агентами пользовательского интерфейса, входящими в состав <i>Реализации интерпретатора sc-моделей пользовательских интерфейсов</i></p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*)
			;;
		*)
	;;

	.system_element_155
	=> nrel_inclusion: [*

		.system_element_156
		=> .system_element_73: 
			.system_element_157
		;
		=> nrel_explanation: [<p>Взаимодействие программной модели sc-памяти с внешними ресурсами может осуществляться посредством специализированного программного интерфейса (API), однако этот вариант неудобен в большинстве случае, поскольку:
		<ul>
			<li> поддерживается только для очень ограниченного набора языков программирования (С, С++);
			<li> требует того, чтобы клиентское приложение, обращающееся к программной модели sc-памяти, фактически составляло с ней единое целое, таким образом исключается возможность построения распределенного коллектива ostis-систем;
			<li> как следствие предыдущего пункта, исключается возможность параллельной работы с sc-памятью нескольких клиентских приложений.</li>
		<ul>Для того, чтобы обеспечить возможность удаленного доступа к sc-памяти не учитывая при этом языки программирования, с помощью которых реализовано конкретное клиентское приложение, было принято решение о реализации возможности доступа к sc-памяти с использованием универсального языка, не зависящего от средств реализации того или иного компонента или системы. В качестве такого языка был разработан строковый язык на базе языка JSON.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_158
		=> nrel_inclusion: [*

			.system_element_159
			=> nrel_explanation: [<p>Реализация подсистемы взаимодействия c sc-памятью на основе языка JSON позволяет ostis-системам взаимодействовать с системами из внешней среды на основе общепринятого транспортного формата передачи данных JSON и предоставляет API для доступа к sc-памяти платформы интерпретации sc-моделей.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> .system_element_77: 
				.system_element_78;
				.system_element_79;
				.system_element_80;
				.system_element_160;
				.system_element_161;
				.system_element_162
			;
			=> .system_element_163: 
				.system_element_164
			;
			=> .system_element_166: .system_element_165;
			<= .system_element_168: .system_element_167
			(*
				=> nrel_idtf: [<p>Подсистема взаимодействия с sc-памятью на основе формата JSON</p>];;
				=> nrel_idtf: [<p>Подсистема взаимодействия с sc-памятью на основе транспортного формата передачи данных JSON</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
				<- .system_element_169;;
				<- .system_element_170;;
				<- .system_element_171;;
				=> .system_element_172: 
					.system_element_173;
					.system_element_174;
					.system_element_175;
					.system_element_176
				;;
				=> nrel_explanation: [<p>Взаимодействие c sc-памятью обеспечивается с помощью передачи информации на <i><b>SC-JSON-коде</b></i> и ведётся, с одной стороны, между сервером, являющегося частью ostis-системы, написанным на том же языке реализации этой ostis-системы и имеющим доступ к её sc-памяти, и с другой стороны множеством клиентом, которым известно о наличии сервера в пределах сети их использования.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
				=> nrel_note: [<p>Осмысленные фрагменты текстов <i><b>SC-JSON-кода</b></i> представляют семантически корректную структуру сущностей и связей между ними.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
				=> nrel_note: [<p>С помощью подсистемы взаимодействия с sc-памятью на основе языка JSON можно взаимодействовать с ostis-системой на таком же множестве возможных операций, как и в случае, если бы взаимодействие происходило (непосредственно) напрямую, на том же языке реализации платформы интерпретации sc-моделей компьютерных систем. При этом результат работы отличается только скоростью обработки информации.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
				=> .system_element_67: {
					.system_element_177;
					.system_element_178
					(*
						=> .system_element_67: {
							.system_element_179;
							.system_element_180;
							.system_element_181;
							.system_element_182
						};;
					*)
				};;
			*);;

			.system_element_164
			=> nrel_idtf: [<p>Semantic JSON-code</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> nrel_idtf: [<p>Semantic JavaScript Object Notation code</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> nrel_idtf: [<p>Язык внешнего смыслового представления знаний для взаимодействия с ostis-системами на основе языка JSON</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> nrel_idtf: [<p>Метаязык, являющийся подмножеством языка JSON и обеспечивающий внешнее представление и структуризацию <i>sc-текстов</i>, используемых ostis-системой в процессе своего функционирования и взаимодействия со внешней средой.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> .system_element_183: [<p>sc-json-текст</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				<- .system_element_184;;
			*);
			<- .system_element_185;
			<- .system_element_186;
			<= nrel_inclusion: .system_element_187;
			=> .system_element_172: 
				.system_element_175;
				.system_element_173
			;
			=> .system_element_6: <
				.system_element_188;
				.system_element_189
			>;
			=> .system_element_190: 
				[<p>Язык JSON является общепринятым открытым форматом, для работы с которым существует большое количество библиотек для популярных языков программирования. Это, в свою очередь, упрощает реализацию клиента и сервера для протокола, построенного на базе <i><b>SC-JSON-код</b></i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Реализация подсистемы взаимодействия со внешней средой на базе <i><b>SC-JSON-код</b></i> не накладывает принципиальных ограничений на объем (длину) каждой команды, в отличие от других бинарных протоколов. Таким образом, появляется возможность использования неатомарных команд, позволяющих, например, за один акт пересылки такой команды по сети создать сразу несколько sc-элементов. Важными примерами таких команд являются <i>команда создания sc-конструкции, изоморфной заданному sc-шаблону</i>, и <i>команда поиска sc-конструкций, изоморфных заданному sc-шаблону</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			;
			=> nrel_note: [<p>Можно сказать, что язык на базе JSON является следующим шагом на пути к созданию мощного и универсального языка запросов, аналогичного языку SQL для реляционных баз данных и предназначенному для работы с sc-памятью. Следующий шагом станет реализация такого протокола на основе одного из стандартов внешнего отображения sc-конструкций, например, <i>SCs-кода</i>, что, в свою очередь, позволит передавать в качестве команд целые программы обработки sc-конструкций, например на языке SCP.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;

			.system_element_191
			=> nrel_inclusion: [*

				.system_element_191
				=> nrel_note: [<p><i>Синтаксис SC-JSON-кода</i> задается: (1) <i>Алфавитом SC-JSON-кода</i>, (2) Грамматикой SC-JSON-кода</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= .system_element_192: .system_element_164;;

				.system_element_193
				=> nrel_inclusion: [*

					.system_element_164
					<= .system_element_195: .system_element_194
					(*
						<= nrel_inclusion: .system_element_196;;
						<= .system_element_195: .system_element_197
						(*
							<= .system_element_198: <
								.system_element_199;
								.system_element_200
								(*
									=> nrel_subdividing: {
										.system_element_201;
										.system_element_202;
										.system_element_203
										(*
											=> nrel_subdividing: {
												.system_element_199;
												.system_element_204
											};;
										*)
									};;
								*)
							>;;
						*);;
						=> nrel_subdividing: {
							.system_element_205;
							.system_element_206
						};;
					*);;
				*];
				=> .system_element_207: [<p>Завершили представление <i>Синтаксической классификации элементов SC-JSON-кода</i></p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_208
				=> nrel_idtf: [<p>Множество всех возможных символов в SC-JSON-коде</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				=> nrel_explanation: [<p>Поскольку SC-JSON-код является линейным строковым языком представления знаний, то его алфавит включает объединение алфавитов всех языков, тексты на которых могут представлять внешние идентификаторы и/или содержимое файлов ostis-системы, множество всех цифр и множество всех других специальных символов.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= .system_element_209: .system_element_164;
				=> nrel_note: [<p>Последовательности знаков алфавита могут образовывать sc-json ключевые слова, sc-json-пары, sc-json-предложения из sc-json-пар и sc-json-тексты из sc-json-предложений.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_164
				=> .system_element_210: 
					[<p>Каждое правило <i>Грамматики SC-JSON-кода</i> описывает корректный с точки зрения <i>Синтаксиса SC-JSON-кода</i> порядок sc-json-объектов в sc-json-предложении. Совокупность правил <i>Грамматики SC-JSON-кода</i> описывает корректный с точки зрения <i>Синтаксиса SC-JSON-кода</i> порядок sc-json-предложений в sc-json-тексте.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Каждое sc-json-предложение является sc-json-списком, состоящим из sc-json-пар и представляет собой команду или ответ на эту команду.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Каждое <i>команда (ответ на команду) на SC-JSON-коде</i> состоит из заголовка, включающего sc-json-пары описания самой команды (ответа на команду), и сообщения, различного для каждого класса команд (ответов на команды). Сообщение <i>команды (ответа на команду) на SC-JSON-коде</i> обычно представляет собой список sc-json-объектов и может не ограничиваться по мощности.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Каждая sc-json-пара состоит из двух элементов: ключевого слова и некоторого другого sc-json-объекта, ассоциируемого с этим ключевым словом. Набор ключевых слов в sc-json-парах определяется конкретным классом <i>команд (ответов на команды) на SC-JSON-коде</i>. Sc-json-пара начинается знаком открывающейся фигурной скобки " и заканчивается знаком закрывающейся фигурной скобки """. Ключевое слово и sc-json-объект, ассоциируемый с ним, разделяются при помощи знака двоеточия ":".</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Sc-json-строки, записанные в sc-json-текстах, начинаются и заканчиваются знаком двух ковычек .</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Sc-json-списки, состоящие не из sc-json-пар, начинаются знаком открывающейся квадратной скобки "" и заканчиваются знаком закрывающейся квадратной скобки "". Sc-json-объекты в sc-json-списках разделяются запятыми ",".</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*)
				;;

				.system_element_211
				=> nrel_idtf: [<p>Множество всех возможных правил, используемых при построении команд и ответов на них на SC-JSON-коде</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				=> nrel_explanation: [<p>Каждой команде <i>SC-JSON-кода</i> однозначно соответствует правило грамматики <i>SC-JSON-кода</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= .system_element_212: .system_element_164;
				=> nrel_explanation: [<p>Правила <i>Грамматики SC-JSON-кода</i> позволяют правильно составить команду на SC-JSON-коде. Каждое правило грамматики <i>SC-JSON-кода</i> представляется в виде правила на <i>Языке описания грамматик ANTLR</i> и его интерпретации на естественном языке.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				-> .system_element_214: .system_element_213
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/command.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Класс <i>команд на SC-JSON-коде</i> включает <i>команду создания sc-элементов</i>, <i>команду получения соответствующих типов sc-элементов</i>, <i>команду удаления sc-элементов</i>, <i>команду обработки ключевых sc-элементов</i>, <i>команду обработки содержимого файлов ostis-системы</i>, <i>команду поиска sc-конструкций, изоморфных заданному sc-шаблону</i>, <i>команду генерации sc-конструкции, изоморфной заданному sc-шаблону</i>, и <i>команду обработки sc-событий</i>. В <i>команду на SC-JSON-коде</i> включаются идентификатор этой команды, тип и сообщение.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_205;;
				*);
				-> .system_element_214: .system_element_219
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Класс <i>ответов на команды на SC-JSON-коде</i> включает <i>ответ на команду создания sc-элементов</i>, <i>ответ на команду получения соответствующих типов sc-элементов</i>, <i>ответ на команду удаления sc-элементов</i>, <i>ответ на команду обработки ключевых sc-элементов</i>, <i>ответ на команду обработки содержимого файлов ostis-системы</i>, <i>ответ на команду поиска sc-конструкций, изоморфных заданному sc-шаблону</i>, <i>ответ на команду генерации sc-конструкции, изоморфной заданному sc-шаблону</i>, и <i>ответ на команду обработки sc-событий</i>. В <i>ответ на команду на SC-JSON-коде</i> включаются идентификатор соответствующей команды, статус обработки ответа и ответное сообщение.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_206;;
				*);
				-> .system_element_220
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/create_elements_command.pdf"
					(*
						<- concept_file;;
						=> nrel_format: format_pdf;;
						<- .system_element_216;;
						=> .system_element_217: [<p>В сообщении <i>команды создания sc-элементов</i> представляется список описаний создаваемых sc-элементов. Такими sc-элементами могут быть sc-узел, sc-дуга, sc-ребро или файл ostis-системы. Тип sc-элемента указывается в паре с ключевым словом "el": для sc-узла sc-json-тип элемент представляется как "node", для sc-дуги и sc-ребра - "edge", для файла ostis-системы - "link". Метки типов sc-элементов уточняются в соответствующих им описаниях в сообщении команды в паре с ключевым словом "type". Если создаваемым sc-элементом является файл ostis-системы, то дополнительно указывается содержимое этого файла ostis-системы в паре с ключевым словом "content", если создаваемым sc-элементом является sc-дуга или sc-ребро, то указываются описания sc-элементов, из которых они выходят, и sc-элементов, в которые они входят. Описание таких sc-элементов состоят из двух пар: первая пара указывает на способ ассоциации с sc-элементом и представляется как "addr" или "idtf" или "ref" в паре с ключевым словом "type", вторая пара - то, по чему происходит ассоциация с этим sc-элементом: его хэшу, системному идентификатору или номеру в массиве создаваемых sc-элементов - в паре с ключевым словом "value".</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_221;;
				*);
				-> .system_element_222
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/create_elements_command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщением <i>ответа на команду создания sc-элементов</i> является список хэшей созданных sc-элементов, соответствующих описаниям <i>команды создания sc-элементов</i> со статусом 1, в случае успешной обработки команды.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_223;;
				*);
				-> .system_element_224
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/create_elements_by_scs_command.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>В списке описаний создаваемых sc-элементов сообщения этой команды вместо описания создаваемого отдельного sc-элемента указывается фрагмент SCs-текста.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_225;;
				*);
				-> .system_element_226
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/create_elements_by_scs_command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщением <i>ответа на команду создания sc-элементов</i> является список результатов обработки переданных SCs-текстов. Нулевой статус говорит о том, что обработка соотвествующего SCs-текста завершилась безуспешно.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_227;;
				*);
				-> .system_element_228
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/check_elements_command.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщением <i>команды получения соответствующих типов sc-элементов</i> является списком хэшей sc-элементов, у которых необходимо получить синтаксические типы.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_229;;
				*);
				-> .system_element_230
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/check_elements_command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщением <i>ответа на команду получения соответствующих типов sc-элементов</i> является список типов проверенных sc-элементов, соответствующих описаниям <i>команды получения соответствующих типов sc-элементов</i> со статусом 1, в случае успешной обработки команды.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_231;;
				*);
				-> .system_element_232
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/delete_elements_command.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщением <i>команды удаления sc-элементов</i> является список хэшей sc-элементов, которые необходимо удалить из sc-памяти.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_233;;
				*);
				-> .system_element_234
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/delete_elements_command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщение <i>ответа на команду удаления sc-элементов</i> является пустым со статусом 1, в случае успешной обработки команды.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_235;;
				*);
				-> .system_element_236
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_keynodes_command.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщение <i>команды обработки ключевых sc-элементов</i> может включать описание ключевых sc-элементов, которые необходимо найти и/или разрешить по их идентификаторам. Такое деление осуществляется с помощью подкоманд, содержащихся в сообщении команды. Идентификаторами подкоманд могут быть "find" и "resolve" соответственно, стоящие в паре с ключевым словом "command". Описание искомого sc-элемента команды "find" включает системный идентификатор sc-элемента, по которому необходимо найти этот sc-элемент, стоящий в паре с ключевым словом "idtf". Описание разрешаемого sc-элемента команды "resolve" включает системный идентификатор sc-элемента, по которому необходимо найти этот sc-элемент, либо в случае безуспешного поиска создать sc-элемент некоторого типа, указанного в его описании в паре с ключевым словом "elType", и установить для него системный идентификатор, по которому была произведена попытка найти другой sc-элемент.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_237;;
				*);
				-> .system_element_238
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_keynodes_command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщением <i>ответа на команду обработки ключевых sc-элементов</i> является список хэшей sc-элементов, соответствующих описаниям <i>команды обработки ключевых sc-элементов</i> со статусом 1, в случае успешной обработки команды.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_239;;
				*);
				-> .system_element_240
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_link_contents_command.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщение <i>команды обработки содержимого файлов ostis-системы</i> может включать описание ключевых файлов ostis-системы, которые необходимо найти по их содержимому или части этого содержимого, для которых необходимо установить содержимое разрешить и/или у которых необходимо получить содержимое. Как и в <i>Правиле, задающее синтаксис команды обработки ключевых sc-элементов</i> деление осуществляется с помощью подкоманд, содержащихся в сообщении команды. Идентификаторами подкоманд могут быть "find", "find_by_substr", "set" и "get" соответственно, стоящие в паре с ключевым словом "command". В описаниях команд "set" и "get" указывается хэш файла ostis-системы в паре с ключевым словом "addr". В описаниях команд "set", "find" и "find_by_substr" указывается содержимое файла ostis-системы в паре с ключевым словом "data". Дополнительно в описании подкоманды "set" указывается тип устанавливаемого содержимого файла ostis-системы.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_241;;
				*);
				-> .system_element_242
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_link_contents_command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщением <i>ответа на команду обработки содержимого файлов ostis-системы</i> является список, состоящий из булевого результата установки содержимого в файл ostis-системы и/или найденных файлов ostis-системы по их содержимому и/или описания полученного содержимого файлов ostis-системы, соответствующих описаниям <i>команды обработки содержимого файлов ostis-системы</i> со статусом 1, в случае успешной обработки команды.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_243;;
				*);
				-> .system_element_244
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/search_template_command.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						<= nrel_inclusion: .system_element_245;;
						=> .system_element_217: [<p><i>Правило, задающее синтаксис команды поиска sc-конструкций, изоморфных заданному sc-шаблону</i> включает <i>Правило, задающее синтаксис сообщения <i>команды поиска sc-конструкций, изоморфных заданному sc-шаблону,</i> и <i>команды генерации sc-конструкции, изоморфной заданному sc-шаблону</i></i> и описывает команду поиска sc-конструкций по сформированному этой командой sc-шаблону (см. <i>Правило, задающее синтаксис сообщения <i>команды поиска sc-конструкций, изоморфных заданному sc-шаблону,</i> и <i>команды генерации sc-конструкции, изоморфной заданному sc-шаблону</i></i>).</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_246;;
				*);
				-> .system_element_247
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/search_template_command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщение <i>ответа на команду поиска sc-конструкций, изоморфных заданному sc-шаблону</i> состоит из списка найденных sc-конструкций и отображения псевдонимов sc-элементов на их позиции в тройках sc-шаблона. Ответ имеет статус 1, в случае успешной обработки команды.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_248;;
				*);
				-> .system_element_249
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/generate_template_command.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						<= nrel_inclusion: .system_element_250;;
						=> .system_element_217: [<p><i>Правило, задающее синтаксис команды создания sc-конструкции, изоморфной заданному sc-шаблону</i> включает <i>Правило, задающее синтаксис сообщения <i>команды поиска sc-конструкций, изоморфных заданному sc-шаблону,</i> и <i>команды генерации sc-конструкции, изоморфной заданному sc-шаблону</i></i> и описывает команду создания sc-конструкции по сформированному этой командой sc-шаблону (см. <i>Правило, задающее синтаксис сообщения <i>команды поиска sc-конструкций, изоморфных заданному sc-шаблону,</i> и <i>команды генерации sc-конструкции, изоморфной заданному sc-шаблону</i></i>).</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_251;;
				*);
				-> .system_element_252
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/generate_template_command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщение <i>ответа на команду создания sc-конструкции, изоморфной заданному sc-шаблону</i> состоит из списка найденных sc-конструкций и отображения псевдонимов sc-элементов на их позиции в тройках sc-шаблона. Ответ имеет статус 1, в случае успешной обработки команды.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_253;;
				*);
				-> .system_element_254
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/template_message_command.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщения <i>команды поиска sc-конструкций, изоморфных заданному sc-шаблону,</i> и <i>команды создания sc-конструкции, изоморфной заданному sc-шаблону</i> включают описание троек, необходимых для создания sc-шаблона поиска или генерации изоморфных sc-конструкций. Описание каждой тройки sc-шаблона включает описание sc-элементов этой тройки. Описания первого и третьего sc-элементов тройки должны всегда содержать хэш или тип в паре с ключевым словом "value". Если выбран тип, то в паре с ключевым словом "type" указывается "type", если - хэш, то - "addr". Вторым sc-элементом тройки должна быть дуга, для которой всегда указывается тип в паре с ключевым словом "value". Для каждого sc-элемента тройки может указываться псевдоним в паре с "alias". Псевдоним представляет собой строку и может быть использован для ассоциации с sc-элементами в других тройках sc-шаблона, либо ассоциации со значениями переменных sc-шаблона, которые указываются в списке под ключевым словом "params" и могут представлять собой либо хэш sc-элемента, либо его системный идентификатор. Таким образом, в некоторых случаях может отсутствовать необходимость указания хэша или типа sc-элемента. Также вместо списка описаний троек sc-шаблона, может указываться хэш или системный идентификатор sc-структуры, хранящейся в sc-памяти. хэш и системный идентификатор указываются в паре с ключевым словом "value".</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
				*);
				-> .system_element_255
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_events_command.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщение <i>команды обработки sc-событий</i> может включать описание sc-элементов, по котором необходимо зарегистрировать или разрегистрировать sc-события. Идентификаторами подкоманд в описании команды могут быть "create" и "delete" соответственно, стоящие в паре с ключевым словом "command". Описание команды регистрации sс-cобытий "create" представляет собой список описаний типов sc-событий и sc-элементов, по которым необходимо зарегистрировать sc-события. Описания sc-элементов включают хэши этих sc-элементов в парах с ключевым словом "addr". Описание команды разрегистрации sc-событий представляет собой список позиций sc-событий в очереди sc-событий, которые необходимо удалить из этой очереди sc-событий.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					=> nrel_inclusion: .system_element_256
					(*
						<=> .system_element_215: "file://Contents/part_platform/images/sc_event_types.png"
						(*
							<- concept_file;;
							=> nrel_format: format_png;;
							<- .system_element_216;;
							=> .system_element_217: [<p>Sc-событиями могут быть <i>sc-события добавления выходящей дуги из sc-элемента (add_outgoing_edge)</i>, <i>sc-события добавления входящей дуги в sc-элемент (add_ingoing_edge)</i>, <i>sc-события удаления выходящей дуги из sc-элемента (remove_outgoing_edge)</i>, <i>sc-события удаления входящей дуги в sc-элемент (remove_ingoing_edge)</i>, <i>sc-события изменения содержимого файла ostis-системы (content_change)</i> и <i>sc-события удаления sc-элемента (delete_element)</i>.</p>]
							(*
								<- lang_ru;;
								=> nrel_format: format_html;;
							*);;
						*);;
					*);;
					<= .system_element_218: .system_element_257;;
				*);
				-> .system_element_258
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_events_command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p>Сообщение <i>ответа на команду обработки sc-событий</i> состоит из позиций зарегистрированных sc-событий в очереди. Успешным результатом <i>команды обработки sc-событий</i> является статус 1.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_259;;
				*);
				-> .system_element_260
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/init_event_command_answer.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p><i>Ответ инициализации sc-события</i> возникает тогда и только тогда, когда в sc-памяти инициализируется соответствующее sc-событие. <i>Ответ инициализации sc-события</i> всегда отсылается той клиентской системе, которая зарегистрировала это sc-событие. В сообщение <i>ответа инициализации sc-события</i> включаются хэши тех sc-элементов, которые связаны с зарегистрированным sc-событием. Таким образом, если было зарегистрировано sc-событие выходящей sc-дуги, то в списке сообщения <i>ответа инициализации sc-события</i> будут находится хэши трёх sc-элементов: хэш sc-элемента, который был подписан на sc-событие, хэш добавленной выходящей из него sc-дуги и хэш sc-элемента, являющегося концом этой sc-дуги.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					<= .system_element_218: .system_element_261;;
				*);
				-> .system_element_262
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/sc_addr_types.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p><i>Правило, задающее синтаксис синтаксических типов sc-элементов</i> включает <i>Правило, задающее синтаксис синтаксических типов sc-узлов</i>, <i>Правило, задающее синтаксис синтаксических типов sc-дуг</i>, <i>Правило, задающее синтаксис синтаксических типов файлов ostis-системы</i>. Синтаксические типы sc-элементов представляются в виде целого числа и соответствуют программным синтаксическим типам, представляемым в sc-памяти.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
					=> nrel_note: [<p>На данный момент форма представления синтаксического типа sc-элемента зависит от того, как располагаются биты в маске sc-элемента. Следующим шагом в развитии <i>SC-JSON-кода</i> и его грамматики могли быть стать устранение такой зависимости и переход к представлению синтаксических типов в виде строковых литералов, интерпретируемых <i>Серверной системы на основе Websocket, обеспечивающей доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				-> .system_element_263
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/sc_node_types.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p><i>Правило, задающее синтаксис синтаксических типов sc-узлов</i> описывает возможные синтаксические типы sc-узлов, интерпретируемые на стороне <i>Серверной системы на основе Websocket, обеспечивающей доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i>.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
				*);
				-> .system_element_264
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/sc_edge_types.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p><i>Правило, задающее синтаксис синтаксических типов sc-дуг</i> описывает возможные синтаксические типы sc-дуг, в том числе и sc-рёбер, интерпретируемые на стороне <i>Серверной системы на основе Websocket, обеспечивающей доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i>.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
				*);
				-> .system_element_265
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/sc_link_types.png"
					(*
						<- concept_file;;
						=> nrel_format: format_png;;
						<- .system_element_216;;
						=> .system_element_217: [<p><i>Правило, задающее синтаксис синтаксических типов файлов ostis-системы</i> описывает возможные синтаксические типы файлов ostis-системы, интерпретируемые на стороне <i>Серверной системы на основе Websocket, обеспечивающей доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i>.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*);;
				*);;

				.system_element_205
				=> nrel_idtf: [<p>sc-json-code command</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_164;
				=> nrel_note: [<p>Множество <i>команд на SC-JSON-коде</i> легко расширяемо засчёт гибкости и функциональности языка JSON.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_206
				=> nrel_idtf: [<p>sc-json-code command answer</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_164;
				=> nrel_note: [<p>Множество <i>ответов на команды на SC-JSON-коде</i> легко расширяемо вместе с расширением <i>команд на SC-JSON-коде</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_221
				=> nrel_idtf: [<p>create elements command</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_205;
				=> .system_element_84: .system_element_266
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/create_elements_command_example.png";;
					<- .system_element_221;;
					=> .system_element_268: .system_element_267;;
					=> .system_element_217: [<p>Обработать команду создания sc-элементов: sc-узла с типом 1 (неуточняемого типа), файла ostis-системы с типом 2 (неуточняемого типа) и содержимым в виде числа с плавающей точкой 45.4 и sc-дуги типа 32 (константного типа) между sc-элементом, находящимся на нулевой позиции в массиве создаваемых sc-элементов, и sc-элементом, находящимся на первой позиции в том же самом массиве.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> .system_element_269: .system_element_223;
				=> nrel_note: [<p>Стоит отметить, что на уровне интерфейса sc-памяти команда интерпретируется быстро за счёт того, что не используются шаблоны создания изоморфных им конструкций. Также содержимое сообщения <i>команды создания sc-элементов</i> может быть пустым.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_223
				=> nrel_idtf: [<p>create elements command answer</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_206;
				=> .system_element_84: .system_element_267
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/create_elements_command_answer_example.png";;
					<- .system_element_223;;
					=> .system_element_217: [<p>Созданы sc-элементы с хэшами 323, 534 и 342 соответственно. Команда обработана успешно.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);;

				.system_element_229
				=> nrel_idtf: [<p>check elements command</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_205;
				=> .system_element_84: .system_element_270
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/check_elements_command_example.png";;
					<- .system_element_229;;
					=> .system_element_268: .system_element_271;;
					=> .system_element_217: [<p>Получить синтаксические типы sc-элементов с хэшами 885 и 1025.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> .system_element_269: .system_element_231;
				=> nrel_note: [<p>Содержимое сообщения <i>команды получения соответствующих типов sc-элементов</i> может быть пустым.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_231
				=> nrel_idtf: [<p>check elements command answer</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_206;
				=> .system_element_84: .system_element_271
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/check_elements_command_answer_example.png";;
					<- .system_element_231;;
					=> .system_element_217: [<p>Типы sc-элементов 32 и 0 соответственно. Команда обработана успешно.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> nrel_note: [<p>Если sc-элемент с указанным хэшем не существует, то его тип будет равен 0.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_233
				=> nrel_idtf: [<p>delete elements command</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_205;
				=> .system_element_84: .system_element_272
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/delete_elements_command_example.png";;
					<- .system_element_233;;
					=> .system_element_268: .system_element_273;;
					=> .system_element_217: [<p>Удалить sc-элементы с хэшами 885 и 1025.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> .system_element_269: .system_element_235;
				=> nrel_note: [<p>Содержимое сообщения <i>команды удаления sc-элементов</i> может быть пустым.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_235
				=> nrel_idtf: [<p>delete elements command answer</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_206;
				=> .system_element_84: .system_element_273
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/delete_elements_command_answer_example.png";;
					<- .system_element_235;;
					=> .system_element_217: [<p>Sc-элементы были удалены из sc-памяти успешно.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> nrel_note: [<p>Если sc-элемент с указанным хэшем не существует, ответ на команду будет безуспешным.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_237
				=> nrel_idtf: [<p>handle keynodes command</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_205;
				=> .system_element_84: .system_element_274
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_keynodes_command_example.png";;
					<- .system_element_237;;
					=> .system_element_268: .system_element_275;;
					=> .system_element_217: [<p>(1) Найти sc-элемент по системному идентификатору "any_system_identifier"; (2) Разрешить sc-элемент с типом 1 (неуточняемого типа) по системному идентификатору "any_system_identifier".</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> .system_element_269: .system_element_239;
				=> nrel_note: [<p>Данный класс команд позволяет быстро обращаться к sc-элементам по их системным идентификаторам, поскольку ключевые sc-элементы кэшируются на уровне интерфейса.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_239
				=> nrel_idtf: [<p>handle keynodes command answer</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_206;
				=> .system_element_84: .system_element_275
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_keynodes_command_answer_example.png";;
					<- .system_element_239;;
					=> .system_element_217: [<p>Ключевый sc-элемент с системным идентификатором "any_system_identifier" не был найден, поэтому был создан. хэш нового ключевого sc-элемента - 128. Команда выполнена успешно.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);;

				.system_element_241
				=> nrel_idtf: [<p>handle link contents command</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_205;
				=> .system_element_84: .system_element_276
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_link_contents_command_example.png";;
					<- .system_element_241;;
					=> .system_element_268: .system_element_277;;
					=> .system_element_217: [<p>(1) Установить содержимое 67 типа "int" в файл ostis-системы с хэшем 3123; (2) Получить содержимое файла ostis-системы с хэшем 232; (3) Найти файлы ostis-системы с содержимым "exist".</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> .system_element_269: .system_element_243;
				=> nrel_note: [<p>Стоит отметить, что в случае, если файл ostis-системы уже имеет содержимое, то при установке нового содержимого старое содержимое будет удалено из памяти. Содержимое файла ostis-системы может быть установлено как пустое.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_243
				=> nrel_idtf: [<p>handle link contents command answer</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_206;
				=> .system_element_84: .system_element_277
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_link_contents_command_answer_example.png";;
					<- .system_element_243;;
					=> .system_element_217: [<p>(1) Содержимое 67 типа "int" было установлено успешно в файл ostis-системы с хэшем 3123; (2) Содержимое файла ostis-системы с хэшем 232 - число 67 целочисленного типа; (3) Файлы ostis-системы с содержимым "exist": 324 и 423.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);;

				.system_element_246
				=> nrel_idtf: [<p>search template command</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_205;
				=> .system_element_84: .system_element_278
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/search_template_command_example.png";;
					<- .system_element_246;;
					=> .system_element_268: .system_element_279;;
					=> .system_element_217: [<p>Найти все такие тройки, в которых первым элементом является sc-элемент c хэшем 23123, третьим sc-элементом является файл ostis-системы неуточняемого константного типа c псевдонимом "_trg", а вторым элементом - sc-дуга типа sc_edge_d_common c псевдонимом "_edge1", исходящая от sc-элемента c хэшем 23123 и входящая в файл ostis-системы с псевдонимом "_trg", и найти все такие тройки, в которых первым элементом является sc-элемент c хэшем 231342, третьим элементов является sc-дуга под псевдонимом "_edge1", а вторым элементом - sc-дуга типа sc_edge_access_const_pos_perm, исходящая от sc-элемента c хэшем 231342 и входящая в sc-дугу "_edge1". На место переменной с псевдонимом "_trg" подставить sc-элемент с хэшем 564.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*)
;
				=> .system_element_269: .system_element_248;
				=> nrel_note: [<p>Поиск sс-конструкций по сформированному sc-шаблону осуществляется специализированным модулем, являющимся частью sc-памяти.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_248
				=> nrel_idtf: [<p>search template command answer</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_206;
				=> .system_element_84: .system_element_279
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/search_template_command_answer_example.png";;
					<- .system_element_248;;
					=> .system_element_217: [<p>Найдена одна sc-конструкция, состоящая из двух троек. хэши sc-элементов в тройках: 23123, 4953, 564 и 231342, 533, 4953 соответственно их расположению в тройках. Команда выполнена успешно.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> nrel_note: [<p>Важно отметить, что sc-шаблон поиска sc-конструкций не может быть пустым.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_251
				=> nrel_idtf: [<p>generate template command</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_205;
				=> .system_element_84: .system_element_280
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/generate_template_command_example.png";;
					<- .system_element_251;;
					=> .system_element_268: .system_element_281;;
					=> .system_element_217: [<p>Создать такую тройку, в которой первым элементом является sc-элемент c хэшем 589, третьим sc-элементом является sc-узел неуточняемого типа c псевдонимом "_trg", а вторым элементом - sc-дуга типа sc_edge_d_common c псевдонимом "_edge1", исходящая от sc-элемента c хэшем 589 и входящая в sc-узел с псевдонимом "_trg". На место переменной с псевдонимом "_trg" подставить sc-элемент с хэшем 332.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> .system_element_269: .system_element_253;
				=> nrel_note: [<p>Создание sс-конструкции по сформированному sc-шаблону осуществляется специализированным модулем, являющимся частью sc-памяти.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_253
				=> nrel_idtf: [<p>search template command answer</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_206;
				=> .system_element_84: .system_element_281
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/generate_template_command_answer_example.png";;
					<- .system_element_253;;
					=> .system_element_217: [<p>Создана одна sc-конструкция, состоящая из одной тройки. хэши sc-элементов в тройке: 128, 589, 332 соответственно их расположению в тройках. Команда выполнена успешно.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> nrel_note: [<p>Важно отметить, что sc-шаблон создания sc-конструкции не может быть пустым.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_257
				=> nrel_idtf: [<p>handle events command</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_205;
				=> .system_element_84: .system_element_282
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_events_command_example.png";;
					<- .system_element_257;;
					=> .system_element_268: .system_element_283;;
					=> .system_element_217: [<p>(1) Зарегистрировать sc-событие типа "add_outgoing_edge" по sc-элементу с хэшем 324; (2) Разрегистрировать sc-события с позициями sc-элементов 2, 4 и 5 соответственно.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				=> .system_element_269: .system_element_259;
				=> .system_element_269: .system_element_261;
				=> nrel_note: [<p><i>Ответ инициализации sc-события</i> может производиться несколько раз за разные промежутки времени.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;

				.system_element_259
				=> nrel_idtf: [<p>handle events command answer</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_206;
				=> nrel_inclusion: .system_element_164;
				=> .system_element_84: .system_element_283
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/handle_events_command_answer_example.png";;
					<- .system_element_259;;
					=> .system_element_217: [<p>(1) Sc-событие типа "add_outgoing_edge" по sc-элементу с хэшем 324 было зарегистрировано успешно на 7-ой позиции очереди sc-событий; (2) Sc-события под позициями 2, 4, 5 удалены успешно.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);;

				.system_element_261
				=> nrel_idtf: [<p>init event command answer</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				<= nrel_inclusion: .system_element_206;
				=> .system_element_84: .system_element_284
				(*
					<=> .system_element_215: "file://Contents/part_platform/images/init_event_command_answer_example.png";;
					<- .system_element_261;;
					=> .system_element_217: [<p>Sc-событие было инициализировано успешно: добавлена выходящая sc-дуга с хэшем 328 из зарегистрированного sc-элемента с хэшем 324 в sc-элемент c хэшем 35. Статус sc-события - 1.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);;
			*];
			=> .system_element_207: [<p>Завершили представление <i>Синтаксиса SC-JSON-кода</i></p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;

			.system_element_177
			=> nrel_idtf: [<p>Система, работающая по принципам Websocket и предоставляющая параллельно-асинхронный многоклиентский доступ к sc-памяти платформы интерпретации sc-моделей при помощи SC-JSON-кода</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> nrel_idtf: [<p>SC-JSON-сервер</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> .system_element_183: [<p>SC-сервер</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			<- .system_element_169;
			<- .system_element_285;
			<- .system_element_171;
			<= .system_element_286: .system_element_41;
			=> .system_element_172: 
				.system_element_175
			;
			=> .system_element_77: 
				.system_element_140;
				.system_element_79
			;
			=> .system_element_163: 
				.system_element_164
			;
			=> .system_element_287: 
				.system_element_288
				(*
					=> nrel_idtf: [<p>nlohmann-json 3.10.5</p>];;
					<= .system_element_290: .system_element_289
					(*
						=> nrel_idtf: [<p>nlohmann-json</p>];;
						<- .system_element_169;;
						<- .system_element_170;;
						<- .system_element_171;;
						=> .system_element_291: [<p>https://github.com/nlohmann/json</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
							<- .system_element_292;;
						*);;
						=> .system_element_293: [<p>sudo add-apt-repository universe apt-get update apt-get install -y nlohmann-json3-dev</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
							<- .system_element_294;;
							<- .system_element_295;;
						*);;
						=> .system_element_293: [<p>brew install nlohmann-json</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
							<- .system_element_294;;
							<- .system_element_296;;
						*);;
					*);;
				*);
				.system_element_297
				(*
					=> nrel_idtf: [<p>websocketcpp 0.8.2</p>];;
					<= .system_element_290: .system_element_298
					(*
						=> nrel_idtf: [<p>websocketcpp</p>];;
						<- .system_element_169;;
						<- .system_element_170;;
						<- .system_element_171;;
						=> .system_element_291: [<p>https://github.com/zaphoyd/websocketpp</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
							<- .system_element_292;;
						*);;
						=> .system_element_293: [<p>sudo apt-get update apt-get install -y libwebsocketpp-dev</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
							<- .system_element_294;;
							<- .system_element_295;;
						*);;
						=> .system_element_293: [<p>brew install libwebsocketpp</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
							<- .system_element_294;;
							<- .system_element_296;;
						*);;
					*);;
				*);
				.system_element_299
				(*
					=> nrel_idtf: [<p>sc-config-utils 0.1.0</p>];;
					<= .system_element_290: .system_element_300
					(*
						=> nrel_idtf: [<p>sc-config-utils</p>];;
						<- .system_element_169;;
						<- .system_element_170;;
						<- .system_element_171;;
						=> .system_element_172: 
							.system_element_175;
							.system_element_301;
							.system_element_302
						;;
						=> .system_element_291: [<p>https://github.com/ostis-ai/sc-machine/tree/main/sc-tools/sc-config-utils</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
							<- .system_element_292;;
						*);;
					*);;
				*);
				.system_element_303;
				=> nrel_idtf: [<p>sc-machine 0.6.1</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					<= .system_element_290: .system_element_42;;
				*)
			;
			=> .system_element_291: [<p>https://github.com/ostis-ai/sc-machine/tree/main/sc-tools/sc-server</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				<- .system_element_292;;
			*);
			=> nrel_explanation: [<p><i>Серверная система на основе Websocket, обеспечивающая доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i>, представляет собой интерпретатор команд и ответов на них <i>SC-JSON-кода</i> на программное представление sc-конструкций в sc-памяти при помощи Библиотеки программных компонентов для обработки и, задающее синтаксис json-текстов JSON for Modern C++ и Библиотека кросс-платформенных программных компонентов для реализации серверных приложений на основе Websocket WebSocket++, а также обеспечивается комплексным тестовым покрытием посредством программных фреймворков Google Tests и Google Benchmark Tests. Библиотека программных компонентов для обработки и, задающее синтаксис json-текстов JSON for Modern C++ имеет богатый, удобный и быстродействующий функционал, необходимый для реализации подобных компонентов ostis-систем, а Библиотеки кросс-платформенных программных компонентов для реализации серверных приложений на основе Websocket WebSocket++ позволяет элегантно проектировать серверные системы без использовании избыточных зависимостей и решение. Настройка программного компонента осуществляется с помощью <i>Программного компонента настройки программных компонентов ostis-систем</i> и скриптов языков CMake и Bash.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> nrel_explanation: [<p>Стоит отметить, что текущая реализация <i>Серверной системы на основе Websocket, обеспечивающая доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i> не является первой в своём роде и заменяет предыдущую её реализацию, написанную на языке Python. Причиной такой замены состоит в следующем:
			<ul>
				<li> предыдущая реализация <i>Серверной системы на основе Websocket, обеспечивающая доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i>, реализованная на языке программирования Python, зависит от библиотеки Boost Python, предоставляемой сообществом по развитию и коллаборации языков С++ и Python. Дело в том, что такое решение требует поддержки механизма интерпретации программного кода на языке Python на язык С++, что является избыточным и необоснованным, поскольку большая часть программного кода <i><b>Программного варианта реализации платформы интерпретации sc-моделей компьютерных систем</b></i> реализована на языках С и С++. Новая реализация описываемой программной системы позволяет избавиться от использования ёмких и ресурсозатратных библиотек (например, boost-python-lib, llvm) и языка Python;
				<li> при реализации распределённых подсистем важную роль играет скорость обработки знаний, то есть возможность быстро и срочно отвечать на запросы пользователя. Качество доступа к sc-памяти посредством реализованной <i>Подсистемы взаимодействия с sc-памятью на основе языка JSON</i> должно быть соизмеримо с качеством доступа к sc-памяти при помощи специализированного программного интерфейса API, реализованного на том же языке программирования, что и сама система. Новая реализация позволяет повысить скорость обработки запросов <i>Подсистемой взаимодействия с sc-памятью на основе языка JSON</i>, в том числе и обработка знаний, не менее чем в 1,5 раза по сравнению с предыдущим вариантом реализации этой подсистемы.</li>
			<ul></p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> .system_element_305: .system_element_304;
			=> .system_element_306: 
				[<p><i>Серверная система на основе Websocket, обеспечивающая доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i> обеспечивает многофункциональный доступ к sc-памяти ostis-системы и удовлетворяет требованиям своей модели. С точки зрения прагматики, программный компонент имеет такой же специализированный программный интерфейс, как и <i>Программная модель sc-памяти</i>, однако взаимодействие с ним осуществляется посредством сети.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Реализованный программный компонент позволяет многопользовательский асинхронный доступ к sc-памяти. В ходе тестирования sc-сервера выяснилось, что его реализация позволяет обрабатывать запросы 1000 клиентских систем. В связи с необходимостью обеспечения параллельного доступа к sc-памяти на уровне реализации программного компонента были добавлены блоки синхронизации. Среди таких можно заметить очередь команд на обработку системой - вне зависимости от того сколько клиентских систем и в каком количестве они отправляют команды на обработку, все команды добавляются в очередь - такое решение позволит обойти проблемы взаимодействия блоков синхронизации на уровне sc-памяти. При этом серверную систему невозможно отключить до тех пор, пока очередь команд имеет какие-нибудь элементы. Также серверная система продолжает работать, если в списке идентификаторов клиентских систем остались некоторые идентификаторы этих клиентских систем. Эти функции обуславливаются необходимостью поддержки атомарности запросов, обрабатываемых системой.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>В процессе тестирования реализации <i>Серверной системы на основе Websocket, обеспечивающая доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i>, были получены оценки скорости обработки запросов этим компонентом. При нагрузочном тестировании использовалась тестовая клиентская система, написанная на С++ и не имеющая функционала обработки текстов SC-JSON-кода. В результате тестирования было выяснено, что при отправке серверной системы 1000 различных команд: команд создания sc-элементов, команд обработки содержимого файлов ostis-системы и команд удаления sc-элементов, время потраченное на их обработку не превышало 0,2 секунды. При этом в отдельных случаях на обработку 1000 команд создания sc-элементов уходило не более 0,14 секунды, команд удаления sc-элементов - не более 0,07 секунды, команд обработки содержимого файлов ostis-системы - не более 0,27 секунды, команд поиска sc-конструкций, изоморфных заданному sc-шаблону - не более 0,45 секунды.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			;;

			.system_element_304
			<= .system_element_198: <
				...
				(*
					<= .system_element_198: <
						...
						(*
							<= .system_element_198: <
								...
								(*
									<= .system_element_198: <
										.system_element_307;
										.system_element_308
									>;;
								*);
								...
								(*
									<= .system_element_198: <
										.system_element_309;
										.system_element_310
									>;;
								*)
							>;;
						*);
						...
						(*
							<= .system_element_198: <
								...
								(*
									<= .system_element_198: <
										.system_element_311;
										.system_element_312
									>;;
								*);
								...
								(*
									<= .system_element_198: <
										.system_element_313;
										.system_element_314
									>;;
								*)
							>;;
						*)
					>;;
				*);
				...
				(*
					<= .system_element_198: <
						...
						(*
							<= .system_element_198: <
								.system_element_315;
								.system_element_316
							>;;
						*);
						...
						(*
							<= .system_element_198: <
								.system_element_317;
								.system_element_318
							>;;
						*)
					>;;
				*)
			>;
			=> nrel_explanation: [<p><i>Модель Серверной системы на основе Websocket, обеспечивающая доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i> описывает необходимы и достаточный программный интерфейс для взаимодействия c sc-памятью. В общем случае описывает функциональные возможности не только <i>Серверной системы на основе Websocket, обеспечивающая доступ к sc-памяти платформы интерпретации sc-моделей при помощи команд SC-JSON-кода</i>, но клиентских систем взаимодействующих с ней, поскольку зачастую эти клиентские системы включают специализированный программный интерфейс, схожий с интерфейсом серверной системы, но на другом языке программирования.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			<=> .system_element_319: {
				.system_element_307
				(*
					<= .system_element_198: <
						...
						(*
							<= .system_element_198: <
								.system_element_320;
								.system_element_321
							>;;
						*);
						.system_element_322
					>;;
					=> nrel_note: [<p>Создается sc-элемент заданного синтаксического типа из Множества всех синтаксических типов sc-элементов и имеющий заданные связи с заданными элементами из Множества всех sc-элементов, имеющих инцидентные sc-элементы в sc-памяти, дополняя Множество всех sc-элементов, хранящихся в sc-памяти.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_308
				(*
					<= .system_element_198: <
						.system_element_322;
						.system_element_320
					>;;
					=> nrel_note: [<p>У каждого sc-элемента из Множества всех sc-элементов, хранящихся в sc-памяти, можно получить соответствующий синтаксический тип из Множества всех синтаксических типов sc-элементов.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_309
				(*
					<= .system_element_198: <
						.system_element_322;
						.system_element_323
					>;;
					=> nrel_note: [<p>Каждый sc-элемент из Множества всех sc-элементов, хранящихся в sc-памяти, должен находиться в sc-памяти.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_310
				(*
					<= .system_element_324: <
						...
						(*
							<= .system_element_325: {
								...
								(*
									<= .system_element_198: <
										.system_element_322;
										.system_element_326
									>;;
								*);
								...
								(*
									<= .system_element_198: <
										.system_element_327;
										.system_element_326
									>;;
								*)
							};;
						*);
						.system_element_311
					>;;
					=> nrel_note: [<p>Каждый ключевой sc-элемент из Множества всех ключевых sc-элементов, хранящихся в sc-памяти, является sc-элементом Множества всех sc-элементов, хранящихся в sc-памяти, и имеет, по крайней мере, системный идентификатор из Множества всех системных идентификаторов sc-элементов, хранящихся в файловом хранилищеs.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_311
				(*
					<= .system_element_324: <
						...
						(*
							<= .system_element_325: {
								...
								(*
									<= .system_element_198: <
										.system_element_322;
										.system_element_326
									>;;
								*);
								...
								(*
									<= .system_element_198: <
										.system_element_327;
										.system_element_326
									>;;
								*)
							};;
						*);
						.system_element_310
					>;;
					=> nrel_note: [<p>Из каждого sc-элемента Множества всех sc-элементов, хранящихся в sc-памяти, можно получить ключевой sc-элемент Множества всех ключевых sc-элементов, хранящихся в sc-памяти, зная, по крайней мере, его системный идентификатор из Множества всех системных идентификаторов sc-элементов, хранящихся в файловом хранилище.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_312
				(*
					<= .system_element_198: <
						...
						(*
							<= .system_element_198: <
								.system_element_328;
								.system_element_329
							>;;
						*);
						.system_element_323
					>;;
					=> nrel_note: [<p>В каждый sc-элемент из Множества всех файлов ostis-системы, хранящихся в sc-памяти может быть установлено содержимое из Множества всего содержимого файлов ostis-системы, хранящегося в файловом хранилище.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_313
				(*
					<= .system_element_198: <
						.system_element_328;
						.system_element_329
					>;;
					=> nrel_note: [<p>Из каждого файла ostis-системы Множества всех файлов ostis-системы, хранящихся в sc-памяти, можно получить содержимое, принадлежащее Множеству внешних знаков, являющихся содержимым файлов ostis-системы, хранящиеся в файловом хранилище.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_314
				(*
					<= .system_element_198: <
						.system_element_329;
						.system_element_328
					>;;
					=> nrel_note: [<p>По содержимому из Множества внешних знаков, являющихся содержимым файлов ostis-системы, хранящиеся в файловом хранилище, можно получить подмножество файлов ostis-системы из Множества всех файлов ostis-системы, хранящихся в sc-памяти, в которые установлено это содержимое.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_315
				(*
					<= .system_element_324: <
						...
						(*
							<= .system_element_198: <
								...
								(*
									<= .system_element_198: <
										...
										(*
											<= .system_element_198: <
												.system_element_322;
												.system_element_320
											>;;
										*);
										...
										(*
											<= .system_element_198: <
												.system_element_321;
												.system_element_330
											>;;
										*)
									>;;
								*);
								.system_element_331
							>;;
						*);
						.system_element_316
					>;;
					=> nrel_note: [<p>По синтаксическим типам sc-элементов из Множества всех синтаксических типов sc-элементов и/или самим sc-элементам из Множества всех sc-элементов, хранящихся в sc-памяти, связанными с sc-элементами, у которых известны синтаксические типы из Множества всех синтаксических типов sc-элементов, в том числе инцидентным sc-элементами из Множества всех sc-элементов, имеющих инцидентные sc-элементы в sc-памяти, и/или идентификаторам (в том числе псевдонимам) sc-элементов Множества всех идентификаторов sc-элементов, хранящихся в файловом хранилище можно найти sc-структуры, принадлежащие Множеству всех sc-структур и состоящие из всех этих sc-элементов.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_316
				(*
					<= .system_element_324: <
						...
						(*
							<= .system_element_198: <
								...
								(*
									<= .system_element_198: <
										...
										(*
											<= .system_element_198: <
												.system_element_322;
												.system_element_320
											>;;
										*);
										...
										(*
											<= .system_element_198: <
												.system_element_321;
												.system_element_330
											>;;
										*)
									>;;
								*);
								.system_element_331
							>;;
						*);
						.system_element_315
					>;;
					=> nrel_note: [<p>По синтаксическим типам sc-элементов из Множества всех синтаксических типов sc-элементов и/или самим sc-элементам из Множества всех sc-элементов, хранящихся в sc-памяти, связанными с sc-элементами, у которых известны синтаксические типы из Множества всех синтаксических типов sc-элементов, в том числе инцидентным sc-элементами из Множества всех sc-элементов, имеющих инцидентные sc-элементы в sc-памяти, и/или идентификаторам (в том числе псевдонимам) sc-элементов Множества всех идентификаторов sc-элементов, хранящихся в файловом хранилище всегда можно создать sc-структуру, дополняющую Множество всех sc-структур и состоящую из всех этих sc-элементов.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_332
				(*
					<= .system_element_198: <
						...
						(*
							<= .system_element_198: <
								.system_element_333;
								.system_element_334
							>;;
						*);
						.system_element_335
					>;;
					=> nrel_note: [<p>На каждый sc-элемент Множества всех sc-элементов, храняшихся в sc-памяти можно подписать sc-cобытие из Множества всех sc-событий, зарегистрированных в sc-памяти типа из Множества всех sc-событий, зарегистрированных в sc-памяти.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*);
				.system_element_336
				(*
					<= .system_element_198: <
						...
						(*
							<= .system_element_198: <
								.system_element_335;
								.system_element_333
							>;;
						*);
						.system_element_323
					>;;
					=> nrel_note: [<p>На каждый sc-элемент Множества всех sc-элементов, храняшихся в sc-памяти можно отписать от sc-cобытия из Множества всех sc-событий, зарегистрированных в sc-памяти.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
				*)
			};;
		*];
		=> .system_element_207: [<p>Завершили описание <i>Подсистемы взаимодействия c sc-памятью на основе языка JSON</i></p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*];;

	.system_element_75
	=> .system_element_73: .system_element_337
	(*
		=> nrel_idtf: [<p>sc-builder</p>];;
		=> .system_element_163: .system_element_338;;
		=> nrel_explanation: [<p>Сборщик базы знаний из исходных текстов позволяет осуществить сборку базы знаний из набора исходных текстов, записанных в SCs-коде с ограничениями (см. <i>Раздел **про исходные тексты**</i>) в бинарный формат, воспринимаемый <i>Программной моделью sc-памяти</i>. При этом возможна как сборка "с нуля" (с уничтожением ранее созданного слепка памяти), так и аддитивная сборка, когда информация, содержащаяся в заданном множестве файлов, добавляется к уже имеющемуся слепку состояния памяти.В текущей реализации сборщик осуществляет "склеивание" ("слияние") sc-элементов, имеющих на уровне исходных текстов одинаковые <i>системные sc-идентификаторы</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;

	.system_element_60
	<= .system_element_340: .system_element_339;
	=> nrel_note: [<p>Важнейшей особенностью Языка SCP является тот факт, что его программы записываются таким же образом, что и обрабатываемые ими знания, то есть в SC-коде. Это, с одной стороны, дает возможность сделать ostis-системы платформенно-независимыми (четко разделить <i>sc-модель компьютерной системы</i> и платформу интерпретации таких моделей), а с другой стороны требует наличия в рамках платформы <i>Реализации scp-интерпретатора</i>, то есть интерпретатора программ Языка SCP.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_77: 
		.system_element_79
	;
	=> .system_element_73: 
		.system_element_341;
		.system_element_342
		(*
			=> .system_element_73: 
				.system_element_343;
				.system_element_344;
				.system_element_345;
				.system_element_346;
				.system_element_347;
				.system_element_348;
				.system_element_349;
				.system_element_350;
				.system_element_351
			;;
		*);
		.system_element_352;
		.system_element_353;
		.system_element_354
	;
	=> nrel_note: [<p>Текущая <i>Реализация scp-интерпретатора</i> не включает в себя специализированных средств для работы с блокировками, поскольку механизм блокировок элементов sc-памяти реализован на более низком уровне в рамках <i>Реализация sc-хранилища и механизма доступа к нему</i></p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_59
	=> nrel_idtf: [<p>sc-web</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_explanation: [<p>Наряду с реализацией <i>Программной модели sc-памяти</i> важной частью <i>Программного варианта реализации платформы интерпретации sc-моделей компьютерных систем</i> является <i>Реализация интерпретатора sc-моделей пользовательских интерфейсов</i>, которая предоставляет базовые средства просмотра и редактирования базы знаний пользователем, средства для навигации по базе знаний (задания вопросов к базе знаний) и может дополняться новыми компонентами в зависимости от задач, решаемых каждой конкретной ostis-системой.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_77: 
		.system_element_355;
		.system_element_160;
		.system_element_80
	
	(*
		=> nrel_explanation: [<p>На данной иллюстрации показан планируемый вариант архитектуры <i>Реализация интерпретатора sc-моделей пользовательских интерфейсов</i>, важным принципом которой является простота и однотипность подключения любых компонентов пользовательского интерфейса (редакторов, визуализаторов, переключателей, команд меню и т.д.). Для этого реализуется программная прослойка Sandbox, в рамках которой реализуются низкоуровневые операции взаимодействия с серверной частью и которая обеспечивает более удобный программный интерфейс для разработчиков компонентов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> .system_element_356: 
		[<p>Отсутствие единого унифицированного механизма клиент-серверного взаимодействия. Часть компонентов (визуализатор sc-текстов в SCn-коде, команды меню и др.) работают по протоколу HTTP, часть по протоколу SCTP с использованием технологии WebSocket, это приводит к значительным трудностям при развитии платформы.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Протокол HTTP предполагает четкое разделение активного клиента и пассивного сервера, который отвечает на запросы клиентов. Таким образом, сервер (в данном случае --- sc-память) практически не имеет возможности по своей инициативе отправить сообщение клиенту, что повышает безопасность системы, но значительно снижает ее интерактивность. Кроме того, такой вариант реализации затрудняет реализацию принятого в Технологии OSTIS многоагентного подхода, в частности, затрудняет реализацию sc-агентов на стороне клиента. Указанные проблемы могут быть решены путем постоянного мониторинга определенных событий со стороны клиента, однако такой вариант неэффективен.Кроме того, часть интерфейса фактически работает напрямую с sc-памятью с использованием технологии WebSocket, а часть --- через прослойку на базе библиотеки tornado для языка программирования Python, что приводит к дополнительным зависимостям от сторонних библиотек.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Часть компонентов (например, поле поиска по идентификатору) реализована сторонними средствами и практически никак не связана с sc-памятью. Это затрудняет развитие платформы.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Текущая <i>Реализация интерпретатора sc-моделей пользовательских интерфейсов</i> ориентирована только на ведение диалога с пользователем (в стиле вопрос пользователя --- ответ системы). Не поддерживаются такие очевидно необходимые ситуации, как выполнение команды, не предполагающей ответа;возникновение ошибки или отсутствие ответа;необходимость задания вопроса системой пользователю и т.д.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Ограничена возможность взаимодействия пользователя с системой без использования специальных элементов управления. Например, можно задать вопрос системе, нарисовав его в SCg-коде, но ответ пользователь не увидит, хотя в памяти он будет сформирован соответствующим агентом.;Большая часть технологий, использованных при реализации платформы, к настоящему моменту устарела, что затрудняет развитие платформы.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Идея платформенной независимости пользовательского интерфейса (построения sc-модели пользовательского интерфейса) реализована не в полной мере. Полностью описать sc-модель пользовательского интерфейса (включая точное размещение, размеры, дизайн компонентов, их поведение и др.) в настоящее время скорее всего окажется затруднительно из-за ограничений производительности, однако вполне возможно реализовать возможность задания вопросов ко всем компонентам интерфейса, изменить их расположение и т.д., однако эти возможности нельзя реализовать в текущей версии реализации платформы.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Интерфейсная часть работает медленно из-за некоторых недостатков реализации серверной части на языке Python.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Не реализован механизм наследования при добавлении новых внешних языков. Например, добавление нового языка даже очень близкого к SCg-коду требует физического копирования кода компонента и внесение соответствующих изменений, при этом получаются два никак не связанных между собой компонента, которые начинают развиваться независимо друг от друга.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Слабый уровень задокументированности текущей <i>Реализации интерпретатора sc-моделей пользовательских интерфейсов</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	;
	=> .system_element_357: 
		[<p>Унифицировать принципы взаимодействия всех компонентов интерфейса с <i>Программной моделью sc-памяти</i>, независимо от того, к какому типу относится компонент. Например, список команд меню должен формироваться через тот же механизм, что и ответ на запрос пользователя, и команда редактирования, сформированная пользователем, и команда добавления нового фрагмента в базу знаний и т.д.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Унифицировать принципы взаимодействия пользователей с системой независимо от способа взаимодействия и внешнего языка. Например, должна быть возможность задания вопросов и выполнения других команд прямо через SCg/SCn интерфейс. При этом необходимо учитывать принципы редактирования базы знаний, чтобы пользователя не мог под видом задания вопроса внести новую информацию в согласованную часть базы знаний.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Унифицировать принципы обработки событий, происходящих при взаимодействии пользователя с компонентами интерфейса --- поведение кнопок и других интерактивных компонентов должно задаваться не статически сторонними средствами, а реализовываться в виде агента, который, тем не менее, может быть реализован произвольным образом (не обязательно на платформенно-независимом уровне). Любое действие, совершаемое пользователем, на логическом уровне должно трактоваться и обрабатываться как инициирование агента.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Обеспечить возможность выполнять команды (в частности, задавать вопросы) с произвольным количеством аргументов, в том числе --- без аргументов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Обеспечить возможность отображения ответа на вопрос по частям, если ответ очень большой и для отображения требуется много времени.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Каждый отображаемый компонент интерфейса должен трактоваться как изображение некоторого sc-узла, описанного в базе знаний. Таким образом, пользователь должен иметь возможность задания произвольных вопросов к любым компонентам интерфейса.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Максимально упростить и задокументировать механизм добавления новых компонентов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Обеспечить возможность добавления новых компонентов на основе имеющихся без создания независимых копий. Например, должна быть возможность создать компонент для языка, расширяющего язык SCg новыми примитивами, переопределять принципы размещения sc-текстов и т.д.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Свести к минимуму зависимость от сторонних библиотек.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Свести к минимуму использование протокола HTTP (начальная загрузка общей структуры интерфейса), обеспечить возможность равноправного двустороннего взаимодействия серверной и клиентской части.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	;
	=> nrel_note: [<p>Очевидно, что реализация большинства из приведенных требований связана не только с собственно вариантом реализации платформы, но и требует развития теории логико-семантических моделей пользовательских интерфейсов и уточнения в рамках нее общих принципов организации пользовательских интерфейсов ostis-систем. Однако, принципиальная возможность реализации таких моделей должна быть учтена в рамках реализации платформы.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_358: 
		.system_element_359
		(*
			=> nrel_explanation: [<p><i>Панель меню команд пользовательского интерфейса</i> содержит изображения классов команд (как атомарных, так и неатомарных), имеющихся на данный момент в базе знаний и входящих в декомпозицию <i>Главного меню пользовательского интерфейса</i> (имеется в виду полная декомпозиция, которая в общем случае может включать несколько уровней неатомарных классов команд).Взаимодействие с изображением неатомарного класса команд инициирует команду изображения классов команд, входящих в декомпозицию данного неатомарного класса команд.Взаимодействие с изображением атомарного класса команд инициирует генерацию команды данного класса с ранее выбранными аргументами на основе соответствующей <i>обобщенной формулировки класса команд</i> (шаблона класса команд).</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_360
		(*
			=> nrel_explanation: [<p><i>Компонент переключения языка идентификации отображаемых sc-элементов</i> является изображением множества имеющихся в системе естественных языков. Взаимодействие пользователя с данным компонентом переключает пользовательский интерфейс в режим общения с конкретным пользователем с использованием <i>основных sc-идентификаторов</i>, принадлежащих данному <i>естественному языку</i>. Это значит, что при изображении sc-идентификаторов sc-элементов на каком-либо языке, например, SCg-коде или SCn-коде будут использоваться <i>основные sc-идентификаторы</i>, принадлежащие данному <i>естественному языку</i>. Это касается как sc-элементов, отображаемых в рамках <i>Панели визуализации и редактирования знаний</i>, так и любых других sc-элементов, например, классов команд и даже самих <i>естественных языков</i>, изображаемых в рамках самого <i>Компонента переключения языка идентификации отображаемых sc-элементов</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_361
		(*
			=> nrel_explanation: [<p><i>Компонент переключения внешнего языка визуализации знаний</i> служит для переключения языка визуализации знаний в текущем окне, отображаемом на <i>Панели визуализации и редактирования знаний</i>. В текущей реализации в качестве таких языков по умолчанию поддерживаются SCg-код и SCn-код, а также любые другие языки, входящие во множество <i>внешних языков визуализации SC-кода</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_362
		(*
			=> nrel_explanation: [<p><i>Поле поиска sc-элементов по идентификатору</i> позволяет осуществлять поиск <b>sc-идентификаторов</b>, содержащих подстроку, введенную в данное поле (с учетом регистра). В результате поиска отображается список sc-идентификаторов, содержащих указанную подстроку, при взаимодействии с которыми осуществляется автоматическое задание вопроса"Что это такое?", аргументом которого является либо для сам sc-элемент, имеющий данный sc-идентификатор (в случае, если указанный sc-идентификатор является основным или системным, и, таким образом, указанный sc-элемент может быть определен однозначно), либо для самого внутреннего файла ostis-системы, являющегося sc-идентификатором (в случае, если данный sc-идентификатор является неосновным).</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_363
		(*
			=> nrel_explanation: [<p><i>Панель отображения диалога пользователя с ostis-системой</i> отображает упорядоченный по времени список sc-элементов, являющихся знаками действий, которые инициировал пользователь в рамках диалога с ostis-системой путем взаимодействия с изображениями соответствующих классов команд (то есть, если действие было инициировано другим способом, например, путем его явного инициирования через создание дуги принадлежности множеству <i>инициированных действий</i> в sc.g-редакторе, то на данной панели оно отображено не будет). При взаимодействии пользователя с любым из изображенных знаков действий на <i>Панели визуализации и редактирования знаний</i> отображается окно, содержащее результат выполнения данного <i>действия</i> на том языке визуализации, на котором он был отображен, когда пользователь просматривал его в последний (предыдущий) раз. Таким образом, в текущей реализации данная панель может работать только в том случае, если инициированное пользователем действие предполагает явно представленный в памяти результат данного действия. В свою очередь, из этого следует, что в настоящее время данная панель, как и в целом <i>Реализация интерпретатора sc-моделей пользовательских интерфейсов</i>, позволяет работать с системой только в режиме диалога "вопрос-ответ".</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_364
		(*
			=> nrel_explanation: [<p><i>Панель визуализации и редактирования знаний</i> отображает окна, содержащие sc-текст, представленный на некотором языке из множества <i>внешних языков визуализации SC-кода</i> и, как правило, являющийся результатом некоторого действия, инициированного пользователем. Если соответствующий визуализатор поддерживает возможность редактирования текстов соответствующего естественного языка, то он одновременно является также и редактором.</p>];;
			=> .system_element_73: 
				.system_element_365;
				.system_element_366
			;;
			=> nrel_note: [<p>При необходимости пользовательский интерфейс каждой конкретной ostis-системы может быть дополнен визуализаторами и редакторами различных внешних языков, которые в текущей версии <i>Реализации интерпретатора sc-моделей пользовательских интерфейсов</i> будут также располагаться на <i>Панели визуализации и редактирования знаний</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*)
	;;
*];;
